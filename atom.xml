<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>everbelong</title>
  
  <subtitle>myself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-24T12:20:34.834Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>everbelong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组合数学整理集锦</title>
    <link href="http://yoursite.com/2019/01/23/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2019/01/23/组合数学整理集锦/</id>
    <published>2019-01-23T11:53:57.000Z</published>
    <updated>2019-01-24T12:20:34.834Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#排列的生成">排列的生成</a><ul><li><a href="#按字典序思想生成下一个排列">按字典序思想生成下一个排列</a></li></ul></li><li><a href="#排列和组合的计数">排列和组合的计数</a><ul><li><a href="#两种特殊的排列组合技术公式">两种特殊的排列组合技术公式</a><ul><li><a href="#catalan数">Catalan数</a><ul><li><a href="#公式">公式</a></li><li><a href="#应用">应用</a></li><li><a href="#操练">操练</a></li></ul></li><li><a href="#bell数">Bell数</a></li><li><a href="#stirling数">Stirling数</a></li></ul></li><li><a href="#多重集的排列组合">多重集的排列组合</a></li></ul></li><li><a href="#容斥原理与鸽笼原理">容斥原理与鸽笼原理</a></li><li><a href="#波利亚定理">波利亚定理</a></li><li><a href="#生成函数与递推关系">生成函数与递推关系</a></li></ul><!-- tocstop --><a id="more"></a><h1><span id="排列的生成">排列的生成</span></h1><h2><span id="按字典序思想生成下一个排列">按字典序思想生成下一个排列</span></h2><p>设当前序列为$ (p) = p_1p_2p_3…p_n $，按字典序思想生成下一个排列方法如下：</p><ol><li>从右向左，计算最后一个<strong>増序</strong>的尾元素的下标i，即$ i = max{j\ |\ p_{j-1} &lt; p_j,\ p_j \ge p_{j+1} } $</li><li>从右向左找到$p_{i-1}$后面比$p_{i-1}$大的最后一个元素的下标j，即$j = max{ k\ |\ k \ge i,\ p_{i-1} &lt; p_k }$</li><li>交换$p_{i-1}$与$p_j$，得到$p_1…p_{i-2}p_jp_ip_{i+1}…p_{j-1}p_{i-1}p_{j+1}…p_n$</li><li>翻转新的$p_j$后面的元素，使其递增（也就是说原来是递减的），得到$p_1…p_{i-2}p_jp_n…p_{j+1}p_{i-1}p_{j-1}…p_{i+1}p_i$</li></ol><p>原理想想就明白啦，下面有一道题：</p><blockquote><p><a href="http://poj.org/problem?id=1146" target="_blank" rel="noopener">POJ1146 ID Codes</a></p></blockquote><p>就是一道很裸的题，直接来代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) &amp;&amp; <span class="built_in">strcmp</span>(str, <span class="string">"#"</span>)) &#123; </span><br><span class="line">        len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i<span class="number">-1</span>] &lt; str[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt;= i; j--) <span class="keyword">if</span>(str[i<span class="number">-1</span>] &lt; str[j]) &#123; swap(str[i<span class="number">-1</span>], str[j]); <span class="keyword">break</span>; &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= len - (j - i + <span class="number">1</span>); j++) swap(str[j], str[len - (j - i + <span class="number">1</span>)]);</span><br><span class="line">                <span class="built_in">puts</span>(str); flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">"No Successor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再说一句，要注意看清楚流程中的大于号和大于等于号，另外就是当找不到时代表已经找完了，这就是最后一个，算法结束。</p><h1><span id="排列和组合的计数">排列和组合的计数</span></h1><h2><span id="两种特殊的排列组合技术公式">两种特殊的排列组合技术公式</span></h2><h3><span id="catalan数">Catalan数</span></h3><h4><span id="公式">公式</span></h4><blockquote><p>Catalan数是序列｛C｝，其中 $ C_0=1,\ C_1=1,$$$C_n = C_0C_{n-1}+C_!C_{n-2}+…+C_{n-1}C_0,\ n\ge2. $$</p></blockquote><p>在定义中就已经给出了它最一般的递推式，下面还有几个计算是很常用的：</p><blockquote><p>变形递推式$$ C_n = \frac{4n-2}{n+1}\times C_{n-1}, n &gt; 1 $$</p></blockquote><blockquote><p>通项公式$$ C_n = \frac{C(2n, n)}{n+1}, n = 0, 1, 2… $$$$C_n=C(2n,n)-C(2n,n+1),n=0,1,2…$$</p></blockquote><p>酌情使用，方便为上<br>要注意卡特兰数的下标从0开始，不要随意改，会出现意想不到的问题。</p><h4><span id="应用">应用</span></h4><ol><li><p>由n个1和n个0构成2n项满足所有前缀中1比0多的序列个数等于第n个Catalan数。<br>证明：我们先求出所有的序列，然后减去不合法的序列即是答案。所有序列个数直接根据组合数的定义为$C(n,2n)$，现在要证明满足存在一个结论中所说的序列与n+1个0与n-1个1构成的01序列构成一个双射，即11对应关系，因为很显然，后者的数量为$C(n−1,2n)$。<br>对前者，很显然可以找到一个位置为$2p+1$的前缀，使得其中有$p+1$个1和$p$个0，好的我们把它取反，即得到了后者。对后者，同理。于是得到了上述第二个通项公式。<br>&emsp;</p></li><li><p>我们可以将应用1变换形式：将1看成右括号，0看成左括号，就变成了左括号和右括号各有n个时，合法括号表达式的个数。比如2个左括号和2个右括号组成的合法表达式有种，是()()和(())。<br>&emsp;</p></li><li><p>n个节点构造二叉树的所有可能形态数为$C_n$。<img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/Catalan_number_binary_tree_example.png" alt=""><br>考虑随便取一个节点作为根，那么他左边和右边的儿子节点个数就确定了，假定根节点标号为x，那么左子树的标号就是从1到x-1,共x-1个，右子树的标号就是从x+1到n，共n-x个，那么将x从1取到n，就获得了所有的情况数。得到的为定义递推式。<br>&emsp;</p></li><li><p>n个非叶节点的满二叉树的形态数（对称后得到的二叉树除非自己本身对称，否则算是不同）。对于满二叉树，实际上就是将应用4中的每个子节点的空儿子上都加上叶子，就形成了对应的满二叉树，那么n个非叶节点形成的满二叉树的形态数即为$C_n$<br>&emsp;</p></li><li><p>对于一个n*n的正方形网格，每次只能向右或者向上移动一格，那么从左下角到右上角所有在副对角线右下方的路径总数为$C_n$。<img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/450px-Catalan_number_4x4_grid_example.svg.png" alt=""><br>可以将一条水平边记为+1,垂直边记为-1,那么就组成了一个n个+1和n个-1的序列，并且保证前k步中水平边数不小于垂直边数，换句话说前k个元素的和非负。<br>&emsp;</p></li><li><p>对凸n+2边形进行不同的三角形分割（只连接顶点对形成n个三角形）数为$C_n$<br><img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/400px-Catalan-Hexagons-example.svg.png" alt=""><br>&emsp;</p></li><li><p>n个数入栈后的出栈的排列总数是$C_n$。例如1,2,3入栈的出栈排序有123，132，213，231和321五种<br>&emsp;</p></li><li><p>n层的阶梯切割为n个矩形的切法数也是。如下图所示：<img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/400px-Catalan_stairsteps_4.svg.png" alt=""><br>考虑先绘制如下图片，即n为5的时候的阶梯：<br><img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/stairs.png" alt=""><br>注意到每个切割出来的矩形都必需包括一块标示为*的小正方形，那么此时枚举每个*与#标示的两角作为矩形，剩下的两个小阶梯就是我们的两个更小的子问题了。</p></li></ol><p>&emsp;<br>事实上，从应用中我们也可以看到很多证明通项公式的方法。</p><h4><span id="操练">操练</span></h4><p>给道题目吧：</p><blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2822" target="_blank" rel="noopener">BZOJ2822: [AHOI2012]树屋阶梯</a></p></blockquote><p>卡特兰数+高精度，比较裸，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;l = a[<span class="number">0</span>]; <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)&#123;</span><br><span class="line">        a[i] = a[i] * x + left;</span><br><span class="line">        left = a[i] / mod;</span><br><span class="line">        a[i] = a[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left) a[++l] = left % mod, left /= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;l = a[<span class="number">0</span>]; <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i; i--)&#123;</span><br><span class="line">        a[i] += left * mod;</span><br><span class="line">        left = a[i] % x;</span><br><span class="line">        a[i] /= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!a[l]) l--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = a[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[l]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l - <span class="number">1</span>; i; i--) <span class="built_in">printf</span>(<span class="string">"%04d"</span>, a[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a[<span class="number">0</span>] = a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) mul(a, i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) div(a, i);</span><br><span class="line">    div(a, n + <span class="number">1</span>);</span><br><span class="line">    print(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="bell数">Bell数</span></h3><blockquote><p>Bell数是集合的划分数，也是一个集合上的等价关系的数目；Bell数{B}, 其中$B_n$是包含n个元素的集合的划分方法的数目。显然，$B_0=1, B_1=1, B_2=2, B_3=5$$$B_{n+1} = \sum_{k=0}^nC(n, k)B_k $$</p></blockquote><p>很简单吧</p><h3><span id="stirling数">Stirling数</span></h3><blockquote><p>第一类Stirling数是将n个不同元素放入m个环排列的数目。其中，$S(n, 0)=0,\ S(1,1)=1$$$S(n, m) = S(n-1, k-1) + (n-1)*S(n-1, m)$$</p></blockquote><img src="/2019/01/23/组合数学整理集锦/stirling1.jpg"><blockquote><p>第二类Stirling数是将n个元素的集合划分为k个不为空的子集的方式的个数，其中$S(n, n) = S(n, 1) = 1 $$$S(n, m) = S(n-1, m-1) + k * S(n-1, m) $$</p></blockquote><img src="/2019/01/23/组合数学整理集锦/stirling2.jpg"><h2><span id="多重集的排列组合">多重集的排列组合</span></h2><blockquote><p>多重集是可重复出现的元素组成的集合。若多重集中不同元素个数为k，称该多重集为k元多重集。多重集中元素$a_i$出现的次数$n_i$称为元素$ai$的重数。若有限多重集S有$a_1, a_2, …, a_k$共k个不同元素，且ai的重数为ni，则S可记为：${ n_1•a_1, n_2•a_2, ……, n_k•a_k }$。</p></blockquote><img src="/2019/01/23/组合数学整理集锦/multi.jpg"><h1><span id="容斥原理与鸽笼原理">容斥原理与鸽笼原理</span></h1><h1><span id="波利亚定理">波利亚定理</span></h1><h1><span id="生成函数与递推关系">生成函数与递推关系</span></h1>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#排列的生成&quot;&gt;排列的生成&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#按字典序思想生成下一个排列&quot;&gt;按字典序思想生成下一个排列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#排列和组合的计数&quot;&gt;排列和组合的计数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#两种特殊的排列组合技术公式&quot;&gt;两种特殊的排列组合技术公式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#catalan数&quot;&gt;Catalan数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#公式&quot;&gt;公式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#应用&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#操练&quot;&gt;操练&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bell数&quot;&gt;Bell数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stirling数&quot;&gt;Stirling数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#多重集的排列组合&quot;&gt;多重集的排列组合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#容斥原理与鸽笼原理&quot;&gt;容斥原理与鸽笼原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#波利亚定理&quot;&gt;波利亚定理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#生成函数与递推关系&quot;&gt;生成函数与递推关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="排列组合" scheme="http://yoursite.com/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
      <category term="波利亚定理" scheme="http://yoursite.com/tags/%E6%B3%A2%E5%88%A9%E4%BA%9A%E5%AE%9A%E7%90%86/"/>
    
      <category term="生成函数" scheme="http://yoursite.com/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1001 狼抓兔子</title>
    <link href="http://yoursite.com/2019/01/22/BZOJ1001-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/"/>
    <id>http://yoursite.com/2019/01/22/BZOJ1001-狼抓兔子/</id>
    <published>2019-01-22T12:56:40.000Z</published>
    <updated>2019-01-22T14:10:16.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1001" target="_blank" rel="noopener">BZOJ1001</a></p></blockquote><h1><span id="description">Description</span></h1><p>现在小朋友们最喜欢的”喜羊羊与灰太狼”,话说灰太狼抓羊不到，但抓兔子还是比较在行的，<br>而且现在的兔子还比较笨，它们只有两个窝，现在你做为狼王，面对下面这样一个网格的地形：<br><img src="https://www.lydsy.com/JudgeOnline/images/1001.jpg" alt=""><br>左上角点为(1,1),右下角点为(N,M)(上图中N=4,M=5).有以下三种类型的道路<br>1:(x,y)&lt;\==&gt;(x+1,y)<br>2:(x,y)&lt;\==&gt;(x,y+1)<br>3:(x,y)&lt;\==&gt;(x+1,y+1)<br>道路上的权值表示这条路上最多能够通过的兔子数，道路是无向的. 左上角和右下角为兔子的两个窝，<br>开始时所有的兔子都聚集在左上角(1,1)的窝里，现在它们要跑到右下解(N,M)的窝中去，狼王开始伏击<br>这些兔子.当然为了保险起见，如果一条道路上最多通过的兔子数为K，狼王需要安排同样数量的K只狼，<br>才能完全封锁这条道路，你需要帮助狼王安排一个伏击方案，使得在将兔子一网打尽的前提下，参与的<br>狼的数量要最小。因为狼还要去找喜羊羊麻烦.<br><a id="more"></a></p><h1><span id="input">Input</span></h1><p>第一行为N,M.表示网格的大小，N,M均小于等于1000.<br>接下来分三部分<br>第一部分共N行，每行M-1个数，表示横向道路的权值.<br>第二部分共N-1行，每行M个数，表示纵向道路的权值.<br>第三部分共N-1行，每行M-1个数，表示斜向道路的权值.<br>输入文件保证不超过10M</p><h1><span id="output">Output</span></h1><p>输出一个整数，表示参与伏击的狼的最小数量.</p><h1><span id="sample-input">Sample Input</span></h1><p>3 4<br>5 6 4<br>4 3 1<br>7 5 3<br>5 6 7 8<br>8 7 6 5<br>5 5 5<br>6 6 6</p><h1><span id="sample-output">Sample Output</span></h1><p>14</p><h1><span id="solution">Solution</span></h1><h2><span id="解法一网络流">解法一：网络流</span></h2><p>很容易想到题目让求的就是最小割，利用最小割最大流定理，就是一道求最大流的裸题。<br>说几点Dinic的注意点：</p><ul><li>tot初始化为1</li><li>当发现一条路无法增光时，将d数组设为0，表示该点不可能继续增广，可以大大提速</li><li>路径是双向边，再加上反向边，总共是4条边</li><li>模板尽可能背的准一点吧，我<del>默写</del>的时候出来很多小问题</li></ul><h2><span id="解法二耦合图">解法二：耦合图</span></h2><p>这个解法就巧妙多了。</p><h1><span id="code">Code</span></h1><h2><span id="解法一">解法一</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, head[N*N], ver[N*N*<span class="number">12</span>], Next[N*N*<span class="number">12</span>], edge[N*N*<span class="number">12</span>], tot = <span class="number">1</span>, d[N*N], maxflow, f, s, t;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = y, edge[tot] = z, Next[tot] = head[x], head[x] = tot;</span><br><span class="line">    ver[++tot] = x, edge[tot] = z, Next[tot] = head[y], head[y] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    d[s] = <span class="number">1</span>; q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = Next[i]) <span class="keyword">if</span>(edge[i] &amp;&amp; !d[ver[i]]) &#123;</span><br><span class="line">            d[ver[i]] = d[x] + <span class="number">1</span>;</span><br><span class="line">            q.push(ver[i]);</span><br><span class="line">            <span class="keyword">if</span>(ver[i] == t) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> k, rest = flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i &amp;&amp; rest; i = Next[i]) </span><br><span class="line">        <span class="keyword">if</span>(edge[i] &amp;&amp; d[ver[i]] == d[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            k = dinic(ver[i], min(rest, edge[i]));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[ver[i]] = <span class="number">0</span>;</span><br><span class="line">            rest -= k;</span><br><span class="line">            edge[i] -= k;</span><br><span class="line">            edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - rest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); </span><br><span class="line">    <span class="keyword">int</span> z; s = <span class="number">1</span>, t = n * m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z), add(i*m+j, i*m+j+<span class="number">1</span>, z), add(i*m+j+<span class="number">1</span>, i*m+j, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z), add(i*m+j, i*m+m+j, z), add(i*m+m+j, i*m+j, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z), add(i*m+j, i*m+m+j+<span class="number">1</span>, z), add(i*m+m+j+<span class="number">1</span>, i*m+j, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(bfs()) <span class="keyword">while</span>(f = dinic(s, inf)) maxflow += f;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxflow &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1001&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;现在小朋友们最喜欢的”喜羊羊与灰太狼”,话说灰太狼抓羊不到，但抓兔子还是比较在行的，&lt;br&gt;而且现在的兔子还比较笨，它们只有两个窝，现在你做为狼王，面对下面这样一个网格的地形：&lt;br&gt;&lt;img src=&quot;https://www.lydsy.com/JudgeOnline/images/1001.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;左上角点为(1,1),右下角点为(N,M)(上图中N=4,M=5).有以下三种类型的道路&lt;br&gt;1:(x,y)&amp;lt;\==&amp;gt;(x+1,y)&lt;br&gt;2:(x,y)&amp;lt;\==&amp;gt;(x,y+1)&lt;br&gt;3:(x,y)&amp;lt;\==&amp;gt;(x+1,y+1)&lt;br&gt;道路上的权值表示这条路上最多能够通过的兔子数，道路是无向的. 左上角和右下角为兔子的两个窝，&lt;br&gt;开始时所有的兔子都聚集在左上角(1,1)的窝里，现在它们要跑到右下解(N,M)的窝中去，狼王开始伏击&lt;br&gt;这些兔子.当然为了保险起见，如果一条道路上最多通过的兔子数为K，狼王需要安排同样数量的K只狼，&lt;br&gt;才能完全封锁这条道路，你需要帮助狼王安排一个伏击方案，使得在将兔子一网打尽的前提下，参与的&lt;br&gt;狼的数量要最小。因为狼还要去找喜羊羊麻烦.&lt;br&gt;
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="网络流-最大流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="耦合图" scheme="http://yoursite.com/tags/%E8%80%A6%E5%90%88%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2434 阿狸的打字机</title>
    <link href="http://yoursite.com/2019/01/22/BZOJ2434-%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/01/22/BZOJ2434-阿狸的打字机/</id>
    <published>2019-01-22T11:44:58.000Z</published>
    <updated>2019-01-22T12:55:48.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2434" target="_blank" rel="noopener">BZOJ2434</a></p></blockquote><h1><span id="description">Description</span></h1><p> 阿狸喜欢收藏各种稀奇古怪的东西，最近他淘到一台老式的打字机。打字机上只有28个按键，分别印有26个小写英文字母和’B’、’P’两个字母。<br>经阿狸研究发现，这个打字机是这样工作的：<br>输入小写字母，打字机的一个凹槽中会加入这个字母(这个字母加在凹槽的最后)。<br>按一下印有’B’的按键，打字机凹槽中最后一个字母会消失。<br>按一下印有’P’的按键，打字机会在纸上打印出凹槽中现有的所有字母并换行，但凹槽中的字母不会消失。<br>例如，阿狸输入aPaPBbP，纸上被打印的字符如下：<br>a<br>aa<br>ab<br>我们把纸上打印出来的字符串从1开始顺序编号，一直到n。打字机有一个非常有趣的功能，在打字机中暗藏一个带数字的小键盘，在小键盘上输入两个数(x,y)（其中1≤x,y≤n），打字机会显示第x个打印的字符串在第y个打印的字符串中出现了多少次。<br>阿狸发现了这个功能以后很兴奋，他想写个程序完成同样的功能，你能帮助他么？<br><a id="more"></a></p><h1><span id="input">Input</span></h1><p>输入的第一行包含一个字符串，按阿狸的输入顺序给出所有阿狸输入的字符。<br>第二行包含一个整数m，表示询问个数。<br>接下来m行描述所有由小键盘输入的询问。其中第i行包含两个整数x, y，表示第i个询问为(x, y)。</p><h1><span id="output">Output</span></h1><p> 输出m行，其中第i行包含一个整数，表示第i个询问的答案。</p><h1><span id="sample-input">Sample Input</span></h1><p>aPaPBbP<br>3<br>1 2<br>1 3<br>2 3</p><h1><span id="sample-output">Sample Output</span></h1><p>2<br>1<br>0</p><h1><span id="hint">HINT</span></h1><p>对于100%的数据，n&lt;=100000,m&lt;=100000,第一行总长度&lt;=100000。<br><img src="https://cdn.luogu.org/upload/pic/2601.png" alt="数据规模与约定"></p><h1><span id="solution">Solution</span></h1><h2><span id="40分做法">40分做法</span></h2><p>第一想法，AC自动机，记录每个字符串以及它们在Trie上的哪个节点结束，直接匹配（好暴力啊）。<br>事实上，这种做法，仅仅是记录所有的字符串都会超时超内存，都轮不到匹配的事。但可以作为一个模板题写写嘛。</p><h1><span id="code">Code</span></h1><h2><span id="40分代码">40分代码</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> n, m, ch[N][<span class="number">30</span>], pos[N], nxt[N], tot = <span class="number">1</span>, s[N], tail;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dic[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ch[cur][s[i]]) ch[cur][s[i]] = ++tot;</span><br><span class="line">        cur = ch[cur][s[i]]; </span><br><span class="line">    &#125; pos[++n] = cur;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail; i++) dic[n].push_back(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) ch[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[x][i]) ch[x][i] = ch[nxt[x]][i];</span><br><span class="line">            <span class="keyword">else</span> q.push(ch[x][i]), nxt[ch[x][i]] = ch[nxt[x]][i];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> pa, <span class="keyword">int</span> son)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dic[pa].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = dic[pa][i], k = ch[cur][c];</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            res += pos[son] == k;</span><br><span class="line">            k = nxt[k];</span><br><span class="line">        &#125;</span><br><span class="line">        cur = ch[cur][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str); <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'P'</span>) insert();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'B'</span> &amp;&amp; tail) tail--;</span><br><span class="line">        <span class="keyword">else</span> s[++tail] = str[i] - <span class="string">'a'</span> + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find(y, x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=2434&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ2434&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt; 阿狸喜欢收藏各种稀奇古怪的东西，最近他淘到一台老式的打字机。打字机上只有28个按键，分别印有26个小写英文字母和’B’、’P’两个字母。&lt;br&gt;经阿狸研究发现，这个打字机是这样工作的：&lt;br&gt;输入小写字母，打字机的一个凹槽中会加入这个字母(这个字母加在凹槽的最后)。&lt;br&gt;按一下印有’B’的按键，打字机凹槽中最后一个字母会消失。&lt;br&gt;按一下印有’P’的按键，打字机会在纸上打印出凹槽中现有的所有字母并换行，但凹槽中的字母不会消失。&lt;br&gt;例如，阿狸输入aPaPBbP，纸上被打印的字符如下：&lt;br&gt;a&lt;br&gt;aa&lt;br&gt;ab&lt;br&gt;我们把纸上打印出来的字符串从1开始顺序编号，一直到n。打字机有一个非常有趣的功能，在打字机中暗藏一个带数字的小键盘，在小键盘上输入两个数(x,y)（其中1≤x,y≤n），打字机会显示第x个打印的字符串在第y个打印的字符串中出现了多少次。&lt;br&gt;阿狸发现了这个功能以后很兴奋，他想写个程序完成同样的功能，你能帮助他么？&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="AC自动机" scheme="http://yoursite.com/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1926 粟粟的书架</title>
    <link href="http://yoursite.com/2019/01/22/BZOJ1926-%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/01/22/BZOJ1926-粟粟的书架/</id>
    <published>2019-01-22T07:22:56.000Z</published>
    <updated>2019-01-22T12:55:43.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1926" target="_blank" rel="noopener">BZOJ1926</a></p></blockquote><h1><span id="description">Description</span></h1><p>幸福幼儿园B29班的粟粟是一个聪明机灵、乖巧可爱的小朋友，她的爱好是画画和读书，尤其喜欢Thomas H. Cormen的文章。粟粟家中有一个R行C列的巨型书架，书架的每一个位置都摆有一本书，上数第i行、左数第j列摆放的书有Pi,j页厚。</p><p>粟粟每天除了读书之外，还有一件必不可少的工作就是摘苹果，她每天必须摘取一个指定的苹果。粟粟家果树上的苹果有的高、有的低，但无论如何凭粟粟自己的个头都难以摘到。不过她发现，如果在脚下放上几本书，就可以够着苹果；她同时注意到，对于第i天指定的那个苹果，只要她脚下放置书的总页数之和不低于Hi，就一定能够摘到。</p><p>由于书架内的书过多，父母担心粟粟一天内就把所有书看完而耽误了上幼儿园，于是每天只允许粟粟在一个特定区域内拿书。这个区域是一个矩形，第i天给定区域的左上角是上数第x1i行的左数第y1i本书，右下角是上数第x2i行的左数第y2i本书。换句话说，粟粟在这一天，只能在这﹙x2i－x1i＋1﹚×﹙y2i－y1i＋1﹚本书中挑选若干本垫在脚下，摘取苹果。</p><p>粟粟每次取书时都能及时放回原位，并且她的书架不会再撤下书目或换上新书，摘苹果的任务会一直持续M天。给出每本书籍的页数和每天的区域限制及采摘要求，请你告诉粟粟，她每天至少拿取多少本书，就可以摘到当天指定的苹果。<br><a id="more"></a></p><h1><span id="input">Input</span></h1><p>第一行是三个正整数R，C，M。<br>接下来是一个R行C列的矩阵，从上到下、从左向右依次给出了每本书的页数Pi，j。<br>接下来M行，第i行给出正整数x1i，y1i，x2i，y2i，Hi，表示第i天的指定区域是﹙x1i，y1i﹚与﹙x2i，y2i﹚间<br>的矩形，总页数之和要求不低于Hi。<br>保证1≤x1i≤x2i≤R，1≤y1i≤y2i≤C。</p><h1><span id="output">Output</span></h1><p>有M行，第i 行回答粟粟在第 i 天时为摘到苹果至少需要 拿取多少本书。如果即使取走所有书都无法摘到苹果，<br>则在该行输出“Poor QLW” （不含引号）。</p><h1><span id="sample-input">Sample Input</span></h1><p>5 5 7<br>14 15 9 26 53<br>58 9 7 9 32<br>38 46 26 43 38<br>32 7 9 50 28<br>8 41 9 7 17<br>1 2 5 3 139<br>3 1 5 5 399<br>3 3 4 5 91<br>4 1 4 1 33<br>1 3 5 4 185<br>3 3 4 3 23<br>3 1 3 3 108 </p><h1><span id="sample-output">Sample Output</span></h1><p>6<br>15<br>2<br>Poor QLW<br>9<br>1<br>3 </p><h1><span id="hint">HINT</span></h1><p>对于 10%的数据，满足 R, C≤10；<br>对于 20%的数据，满足 R, C≤40；<br>对于 50%的数据，满足 R, C≤200，M≤200,000；<br>另有 50%的数据，满足 R＝1，C≤500,000，M≤20,000；<br>对于 100%的数据，满足 1≤Pi,j≤1,000，1≤Hi≤2,000,000,000</p><h1><span id="solution">Solution</span></h1><h2><span id="前50的数据">前50%的数据</span></h2><p>注意到P不大于1000，因此可以预处理出与P有关的数组。<br>val[i][j][k]表示(i, j)左上方的子矩阵中大于等于k的数的总和<br>num[i][j][k]表示(i, j)左上方的子矩阵中大于等于k的数的个数<br>然后就可以<code>二分答案</code>了，二分k，求矩阵前缀和，判定一下OK。</p><h2><span id="后50的数据">后50%的数据</span></h2><p>沿用前面的二分思路，但预处理时间和空间都会爆。<del>这里可以用比较暴力的方法乱搞，但我们要追求高效嘛。</del> 因此想到前缀和就要想到主席树，可以大大节省时间空间。<br>具体来说，对每个前缀维护一个线段树，节点(l, r)维护两个信息：<br>P处于l、r之间的数的总和…(1)<br>P处于l、r之间的数的个数…(2)<br>(就和上面的前缀和意义一样)。<br>对这个线段树可持久化，得到一棵<code>主席树</code>。查询时，在要求的区间的线段树上用(1)判断左走还是右走，用(2)计算答案。</p><h2><span id="注意点">注意点：</span></h2><ul><li><strong>一个区间可能有很多相同的数，只要取其中的一部分</strong>，计算得到要取多少，具体看代码。</li><li>前缀和左端点-1</li><li>递归到头后控制返回</li><li>为了防止混淆，我在代码中把两种解法放在不同的命名空间里。</li></ul><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r, c, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> easy &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line">    <span class="keyword">int</span> p[N][N], num[N][N][P], x1, x2, y1, y2;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val[N][N][P], h;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val[x2][y2][k] - val[x1<span class="number">-1</span>][y2][k] - val[x2][y1<span class="number">-1</span>][k] + val[x1<span class="number">-1</span>][y1<span class="number">-1</span>][k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1000</span>; k++) &#123;</span><br><span class="line">                    val[i][j][k] = val[i<span class="number">-1</span>][j][k] + val[i][j<span class="number">-1</span>][k] - val[i<span class="number">-1</span>][j<span class="number">-1</span>][k];</span><br><span class="line">                    num[i][j][k] = num[i<span class="number">-1</span>][j][k] + num[i][j<span class="number">-1</span>][k] - num[i<span class="number">-1</span>][j<span class="number">-1</span>][k];</span><br><span class="line">                    <span class="keyword">if</span>(k &lt;= p[i][j]) val[i][j][k] += p[i][j], num[i][j][k]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%lld"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2, &amp;h);</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(calc(mid) &gt;= h) l = mid; <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Poor QLW\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[x2][y2][l+<span class="number">1</span>] - num[x1<span class="number">-1</span>][y2][l+<span class="number">1</span>] - num[x2][y1<span class="number">-1</span>][l+<span class="number">1</span>] + num[x1<span class="number">-1</span>][y1<span class="number">-1</span>][l+<span class="number">1</span>] </span><br><span class="line">                    + (h - calc(l+<span class="number">1</span>) + l - <span class="number">1</span>) / l);</span><br><span class="line">                    <span class="comment">//此处要考虑重复的部分到底选几个，肯定是达到要求的前提下选的越少越好</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hard &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line">    <span class="keyword">int</span> lc[N*<span class="number">32</span>], rc[N*<span class="number">32</span>], num[N*<span class="number">32</span>], p[N], rt[N], tot;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val[N*<span class="number">32</span>], h;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = ++tot;</span><br><span class="line">        lc[p] = lc[pre], rc[p] = rc[pre], val[p] = val[pre] + x, num[p] = num[pre] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid) lc[p] = build(lc[pre], l, mid, x);</span><br><span class="line">        <span class="keyword">else</span> rc[p] = build(rc[pre], mid + <span class="number">1</span>, r, x);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lp, <span class="keyword">int</span> rp, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> (x + l - <span class="number">1</span>) / l;</span><br><span class="line">            <span class="comment">//这里跟上面一样，要考虑相同的部分。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, y = val[rc[rp]] - val[rc[lp]];</span><br><span class="line">        <span class="keyword">if</span>(y &gt;= x) <span class="keyword">return</span> query(rc[lp], rc[rp], mid + <span class="number">1</span>, r, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(lc[lp], lc[rp], l, mid, x - y) + num[rc[rp]] - num[rc[lp]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]), rt[i] = build(rt[i<span class="number">-1</span>], <span class="number">1</span>, <span class="number">1000</span>, p[i]);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l, r, t1, t2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%lld"</span>, &amp;t1, &amp;l, &amp;t2, &amp;r, &amp;h);</span><br><span class="line">            <span class="keyword">int</span> ans = query(rt[l<span class="number">-1</span>], rt[r], <span class="number">1</span>, <span class="number">1000</span>, h);</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; r - l + <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Poor QLW\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;r, &amp;c, &amp;m);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">1</span>) hard::work();</span><br><span class="line">    <span class="keyword">else</span> easy::work();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1926&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1926&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;幸福幼儿园B29班的粟粟是一个聪明机灵、乖巧可爱的小朋友，她的爱好是画画和读书，尤其喜欢Thomas H. Cormen的文章。粟粟家中有一个R行C列的巨型书架，书架的每一个位置都摆有一本书，上数第i行、左数第j列摆放的书有Pi,j页厚。&lt;/p&gt;
&lt;p&gt;粟粟每天除了读书之外，还有一件必不可少的工作就是摘苹果，她每天必须摘取一个指定的苹果。粟粟家果树上的苹果有的高、有的低，但无论如何凭粟粟自己的个头都难以摘到。不过她发现，如果在脚下放上几本书，就可以够着苹果；她同时注意到，对于第i天指定的那个苹果，只要她脚下放置书的总页数之和不低于Hi，就一定能够摘到。&lt;/p&gt;
&lt;p&gt;由于书架内的书过多，父母担心粟粟一天内就把所有书看完而耽误了上幼儿园，于是每天只允许粟粟在一个特定区域内拿书。这个区域是一个矩形，第i天给定区域的左上角是上数第x1i行的左数第y1i本书，右下角是上数第x2i行的左数第y2i本书。换句话说，粟粟在这一天，只能在这﹙x2i－x1i＋1﹚×﹙y2i－y1i＋1﹚本书中挑选若干本垫在脚下，摘取苹果。&lt;/p&gt;
&lt;p&gt;粟粟每次取书时都能及时放回原位，并且她的书架不会再撤下书目或换上新书，摘苹果的任务会一直持续M天。给出每本书籍的页数和每天的区域限制及采摘要求，请你告诉粟粟，她每天至少拿取多少本书，就可以摘到当天指定的苹果。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1070 修车</title>
    <link href="http://yoursite.com/2019/01/17/BZOJ1070-%E4%BF%AE%E8%BD%A6/"/>
    <id>http://yoursite.com/2019/01/17/BZOJ1070-修车/</id>
    <published>2019-01-17T13:16:09.000Z</published>
    <updated>2019-01-17T14:21:40.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1070" target="_blank" rel="noopener">BZOJ1070</a></p></blockquote><h1><span id="description">Description</span></h1><p>　　同一时刻有N位车主带着他们的爱车来到了汽车维修中心。维修中心共有M位技术人员，不同的技术人员对不同<br>的车进行维修所用的时间是不同的。现在需要安排这M位技术人员所维修的车及顺序，使得顾客平均等待的时间最<br>小。 说明：顾客的等待时间是指从他把车送至维修中心到维修完毕所用的时间。<br><a id="more"></a></p><h1><span id="input">Input</span></h1><p>　　第一行有两个m,n，表示技术人员数与顾客数。 接下来n行，每行m个整数。第i+1行第j个数表示第j位技术人<br>员维修第i辆车需要用的时间T。</p><h1><span id="output">Output</span></h1><p>　　最小平均等待时间，答案精确到小数点后2位。</p><h1><span id="sample-input">Sample Input</span></h1><p>2 2<br>3 2<br>1 4</p><h1><span id="sample-output">Sample Output</span></h1><p>1.50</p><h1><span id="hint">HINT</span></h1><p>数据范围: (2&lt;=M&lt;=9,1&lt;=N&lt;=60), (1&lt;=T&lt;=1000)</p><h1><span id="solution">Solution</span></h1><p>对于像这样的对应匹配的问题，一般可以使用网络流求解，即构建二分图，大部分时候求最大匹配（当然也不仅是匹配）。本题中一次维修要消耗一定的时间，因此需要使用最小费用最大流。</p><p>最原始的思路是，左部工人，右部客户的二部图，但本题的特殊之处在于排在后面的人会有更长的等待时间。我们仍需保持这是一个二分图，因此需要对点或边进行一些调整。</p><p>首先，要使用一个重要的思想，考虑每辆车对总等待时间的贡献，即<strong>不计算每个顾客等多久，而计算他让别人等了多久</strong></p><p>每一个工人一个车一个车的修，每修一辆车会让后面的人多等一会儿。</p><p>此时就可以想到拆点。把每一个工人节点k拆成个N点，等同于正在修他将要修的倒数第i辆车，向另外一部j点连边即代表他这个修的是j号车， 费用为$a[j][k]*i$，乘以i是因为后面的i辆车都要等待这个时间。</p><p>事实上本题的构图体现了一个<strong>阶段化拆点</strong>的思想，一个点拆成它的不同阶段，相互独立。</p><p>至于二部图的网络流构图法就不累述了，这里说几个注意点：</p><ol><li>边编号要从2开始计</li><li>不要忘记建反向边，容量0，费用-w</li><li>清空数组神马的别忘了</li></ol><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">1010</span>, E = <span class="number">200010</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot = <span class="number">1</span>, head[V], ver[E], Next[E], cap[E], cost[E], a[<span class="number">20</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> s, t, pe[V], pv[V], maxflow, mincost, d[V], v[V];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    ver[++tot] = y, cap[tot] = c, cost[tot] = w;</span><br><span class="line">    Next[tot] = head[x], head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">        q.push(s); d[s] = <span class="number">0</span>; v[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">            v[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = Next[i]) <span class="keyword">if</span>(cap[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(d[y] &gt; d[x] + cost[i]) &#123;</span><br><span class="line">                    d[y] = d[x] + cost[i]; pv[y] = x; pe[y] = i;</span><br><span class="line">                    <span class="keyword">if</span>(!v[y]) v[y] = <span class="number">1</span>, q.push(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d[t] == inf) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> flow = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = pv[i]) flow = min(flow, cap[pe[i]]);</span><br><span class="line">        maxflow += flow;</span><br><span class="line">        mincost += flow * d[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = pv[i]) cap[pe[i]] -= flow, cap[pe[i] ^ <span class="number">1</span>] += flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">    s = n * m + n + <span class="number">1</span>, t = s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[j][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) </span><br><span class="line">                add(i * n + j, m * n + k, <span class="number">1</span>, a[i+<span class="number">1</span>][k] * j), </span><br><span class="line">                add(n * m + k, i * n + j, <span class="number">0</span>, -a[i+<span class="number">1</span>][k] * j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * m; i++) add(s, i, <span class="number">1</span>, <span class="number">0</span>), add(i, s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n * m + <span class="number">1</span>; i &lt;= n * m + n; i++) add(i, t, <span class="number">1</span>, <span class="number">0</span>), add(t, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, (<span class="keyword">double</span>)mincost / n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1070&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1070&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;　　同一时刻有N位车主带着他们的爱车来到了汽车维修中心。维修中心共有M位技术人员，不同的技术人员对不同&lt;br&gt;的车进行维修所用的时间是不同的。现在需要安排这M位技术人员所维修的车及顺序，使得顾客平均等待的时间最&lt;br&gt;小。 说明：顾客的等待时间是指从他把车送至维修中心到维修完毕所用的时间。&lt;br&gt;
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="网络流-费用流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3994 约数个数和</title>
    <link href="http://yoursite.com/2019/01/13/BZOJ3994-%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/13/BZOJ3994-约数个数和/</id>
    <published>2019-01-13T05:57:35.000Z</published>
    <updated>2019-01-22T07:18:58.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接： <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3994" target="_blank" rel="noopener">BZOJ3994</a></p></blockquote><h1><span id="description">Description</span></h1><p> 设d(x)为x的约数个数，给定N、M，求$\sum_{i=1}^N\sum_{j=1}^Md(ij)$<br><a id="more"></a></p><h1><span id="input">Input</span></h1><p>输入文件包含多组测试数据。</p><p>第一行，一个整数T，表示测试数据的组数。<br>接下来的T行，每行两个整数N、M。</p><h1><span id="output">Output</span></h1><p> T行，每行一个整数，表示你所求的答案。</p><h1><span id="sample-input">Sample Input</span></h1><p>2<br>7 4<br>5 6</p><h1><span id="sample-output">Sample Output</span></h1><p>110<br>121</p><h1><span id="hint">HINT</span></h1><p>1&lt;=N, M&lt;=50000<br>1&lt;=T&lt;=50000</p><h1><span id="solution">Solution</span></h1><p>首先，要先介绍一个可爱的结论：<br>$$ d(ij) = \sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$<br>简单证明一下：<br>当$(i, j)=1$时，结果显然为i的约数个数乘j的约数个数。<br>否则，会有一部分重复，因为i*j的某一个因数可以有不同方式得到。怎样得到另一种方式呢？比如现在有$x|i,\ y|j,\ xy|ij,\ d|x$此时让x除以d，y乘以d，得到新的$xy|ij$，而这样做合法的前提是d同时是i和j的因数，或者说$gcd(x, yd)\ne 1$，当有这样的一对约数时，把结果减1，就可以得到这个式子。</p><p>结合其他几道题目，可以发现反演似乎非常青睐gcd，所有的数论函数都要尽量往最大公约数上面靠，然后再开始套路。</p><p>之后就是一道比较经典的反演题目了，总之就是推式子吧。求$$ \sum_{i=1}^N\sum_{j=1}^M\sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$<br>相同的x, y枚举了很多次，因此先枚举x, y，贡献可以直接计算得到，原式即<br>$$\sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = 1]$$<br>我们令$$ f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = n] $$$$ F(d) = \sum_{d|n}f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[d\ |\ gcd(i, j)] $$此处可以开心得去掉gcd，用漂亮的除法代替，枚举i和j分别是d的多少倍，得到$$ F(x) = \sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor$$<br>这时就可以使用<code>莫比乌斯反演</code>了，因为可以看到我们已经消去了gcd，也就是说式子里不存在数论函数了，于是<br>$$ f(d) = \sum_{d|n}\mu(\frac{n}{d})F(n) $$得到答案为$$ ans = f(1) = \sum_{d=1}^{min(N, M)}\mu(d)F(d) =<br>\sum_{d=1}^{min(N, M)}\sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\mu(d)\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor $$<br>现在讨论代码实现，暴力需要三层循环，因此需要用<code>线性筛</code>预处理，对于每一个x，处理出$s[x] = \sum_{i=1}^x\lfloor\frac{x}{i}\rfloor$，未来查询$s[\frac{N}{d}]$，因此只需要枚举d这一个变量。<br>再利用<code>整除分块</code>，$\lfloor\frac{N}{d}\rfloor$且$\lfloor\frac{M}{d}\rfloor$相同的部分只计算一次，就可以在$O(\sqrt{n})$的时间完成一次询问，总复杂度$O(T\sqrt{n})$</p><p>关于$\mu$的计算最好作为一个模板记下啦。</p><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> miu[N], smiu[N], v[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) miu[i] = <span class="number">1</span>, v[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[i]) <span class="keyword">continue</span>;</span><br><span class="line">        miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= n; j += i)&#123;</span><br><span class="line">            v[j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((j / i) % i == <span class="number">0</span>) miu[j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> miu[j] *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) smiu[i] = smiu[i<span class="number">-1</span>] + miu[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= i; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">            r = i / (i / l);</span><br><span class="line">            s[i] += <span class="number">1l</span>l * (r - l + <span class="number">1</span>) * (i / l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init(<span class="number">50000</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m) swap(n, m);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= n; i = j + <span class="number">1</span>)&#123;</span><br><span class="line">            j = min(n / (n / i), m / (m / i));</span><br><span class="line">            ans += <span class="number">1l</span>l * (smiu[j] - smiu[i - <span class="number">1</span>]) * s[n / i] * s[m / i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接： &lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=3994&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ3994&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt; 设d(x)为x的约数个数，给定N、M，求$\sum_{i=1}^N\sum_{j=1}^Md(ij)$&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>施工结束</title>
    <link href="http://yoursite.com/2019/01/13/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    <id>http://yoursite.com/2019/01/13/纪念日/</id>
    <published>2019-01-13T03:57:08.000Z</published>
    <updated>2019-01-13T09:31:15.166Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="博客建成日">博客建成日</span></h1><p>2019年1月13日，该博客基本搭建搭建完成。<br><a id="more"></a><br>话说步入OI也有将近一年的时间了，之前从来没有写过博客。曾经搜题解时看到别人的博客常常是一番羡慕，但不知什么原因，或许是太懒了，一直没有为自己搭建一个blog。从昨晚起，忙碌（<del>玩</del>）了几个小时，心里还是非常有成就感的。从今天起，我应该会养成写题解、发博客的习惯，这应当是有深远意义的。<br>这篇博客主要是为了一个纪念，就像古代人建了一座房子还要写一篇序一样，我如今也是有blog的人了，不仅一番激动。<br>但愿未来这个博客会充实起来，像很多大佬一样有几十篇来自各个OJ的题解。<br>博客界面开不是很满意，未来会慢慢润色的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;博客建成日&quot;&gt;&lt;a href=&quot;#博客建成日&quot; class=&quot;headerlink&quot; title=&quot;博客建成日&quot;&gt;&lt;/a&gt;博客建成日&lt;/h1&gt;&lt;p&gt;2019年1月13日，该博客基本搭建搭建完成。&lt;br&gt;
    
    </summary>
    
      <category term="纪念日" scheme="http://yoursite.com/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
  </entry>
  
</feed>
