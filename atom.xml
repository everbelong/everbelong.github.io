<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>everbelong</title>
  
  <subtitle>myself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-19T08:40:52.674Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>everbelong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BZOJ4653 [Noi2016]区间</title>
    <link href="http://yoursite.com/2019/05/19/BZOJ4653-Noi2016-%E5%8C%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2019/05/19/BZOJ4653-Noi2016-区间/</id>
    <published>2019-05-19T08:15:28.000Z</published>
    <updated>2019-05-19T08:40:52.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4653" target="_blank" rel="noopener">BZOJ4653</a></p></blockquote><p>#Solution<br>第一步离散化<br>我们先把所有区间按长度排序<br>然后可能成为答案的一定是排序后的某一段，否则的话我把他补成完整的一段答案不会更劣<br>同时我们希望作为答案的那一段短一些更好，也就是在可能的情况下不要向两边扩展了<br>所以可以使用单调队列<br>从左到右加入队列，每一次判断队列中的区间是否有m个覆盖了同一个点，是，则更新答案，head++，继续判断<br>判断可以使用线段树实现<br><a id="more"></a></p><p>#Code<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500010</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> ans = inf, pp[maxn * <span class="number">2</span>], cnt, n, m, q[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inter</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">&#125;t[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Inter a, Inter b)</span> </span>&#123; <span class="keyword">return</span> pp[a.r] - pp[a.l] &lt; pp[b.r] - pp[b.l]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">(Inter a, Inter b)</span> </span>&#123; <span class="keyword">return</span> pp[a.r] - pp[a.l] - pp[b.r] + pp[b.l]; &#125;</span><br><span class="line"><span class="keyword">int</span> tag[maxn * <span class="number">8</span>], mx[maxn * <span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tag[p]) <span class="keyword">return</span>;</span><br><span class="line">    mx[p*<span class="number">2</span>] += tag[p]; mx[p*<span class="number">2</span>+<span class="number">1</span>] += tag[p];</span><br><span class="line">    tag[p*<span class="number">2</span>] += tag[p]; tag[p*<span class="number">2</span>+<span class="number">1</span>] += tag[p];</span><br><span class="line">    tag[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123; mx[p] += x; tag[p] += x; <span class="keyword">return</span>; &#125;</span><br><span class="line">    pushdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) change(p*<span class="number">2</span>, l, mid, L, R, x);</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid) change(p*<span class="number">2</span>+<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, x);</span><br><span class="line">    mx[p] = max(mx[p*<span class="number">2</span>], mx[p*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t[i].l, &amp;t[i].r), pp[++cnt] = t[i].l, pp[++cnt] = t[i].r;</span><br><span class="line">    sort(pp + <span class="number">1</span>, pp + <span class="number">1</span> + cnt);</span><br><span class="line">    cnt = unique(pp + <span class="number">1</span>, pp + <span class="number">1</span> + cnt) - pp - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        t[i].l = lower_bound(pp + <span class="number">1</span>, pp + <span class="number">1</span> + cnt, t[i].l) - pp;</span><br><span class="line">        t[i].r = lower_bound(pp + <span class="number">1</span>, pp + <span class="number">1</span> + cnt, t[i].r) - pp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(t + <span class="number">1</span>, t + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        q[++tail] = i;</span><br><span class="line">        change(<span class="number">1</span>, <span class="number">1</span>, cnt, t[i].l, t[i].r, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(head &lt;= tail &amp;&amp; mx[<span class="number">1</span>] &gt;= m) &#123; </span><br><span class="line">            ans = min(ans, len(t[q[tail]], t[q[head]]));</span><br><span class="line">            change(<span class="number">1</span>, <span class="number">1</span>, cnt, t[q[head]].l, t[q[head]].r, <span class="number">-1</span>);</span><br><span class="line">            head++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans == inf) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=4653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ4653&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#Solution&lt;br&gt;第一步离散化&lt;br&gt;我们先把所有区间按长度排序&lt;br&gt;然后可能成为答案的一定是排序后的某一段，否则的话我把他补成完整的一段答案不会更劣&lt;br&gt;同时我们希望作为答案的那一段短一些更好，也就是在可能的情况下不要向两边扩展了&lt;br&gt;所以可以使用单调队列&lt;br&gt;从左到右加入队列，每一次判断队列中的区间是否有m个覆盖了同一个点，是，则更新答案，head++，继续判断&lt;br&gt;判断可以使用线段树实现&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树形数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="单调队列" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1002 轮状病毒</title>
    <link href="http://yoursite.com/2019/02/03/BZOJ1002-%E8%BD%AE%E7%8A%B6%E7%97%85%E6%AF%92/"/>
    <id>http://yoursite.com/2019/02/03/BZOJ1002-轮状病毒/</id>
    <published>2019-02-03T14:04:15.000Z</published>
    <updated>2019-05-19T08:39:31.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1002" target="_blank" rel="noopener">BZOJ1002</a></p></blockquote><h1><span id="solution">Solution</span></h1><p>组合数学，要么递推，要么通项公式<br>本题可以求出一个类递推式</p><p>用一个类似dp的方法。考虑分配周围这个圆的联通，就是一个线性dp了，过程中考虑和中间点的联通。<br>令$f[i]$表示考虑了圆上的前i个的方案数<br>$$<br>f[i] = \sum_{j=1}^if[i-j]\times j<br>$$<br>但这相当于把环拆成了链，还要考虑1和n连接的情况。如果有j个周围的点连成一条，且跨越了1和n，我们将所有这样的情况累加到答案中去。考虑如果这样的点有j个，剩下的点肯定不与这j个点相连，所以连边方案数就是$f[i-j]​$，这j个点有$(j-1)​$种选法(跨越1和n)，与中心点连边的方案数是j。设这种情况为$g[i]$<br>$$<br>g[i] = \sum_{j=2}^if[i-j]\times j\times (j-1)<br>$$</p><p>剩下的就是高精了，建一个结构体，写一个加法和乘法。</p><p>但这道题让我感受到了常数的力量。</p><p>最开始我写了一个+=，写了一个*，乘法会返回一个大整数类型，加等于就直接穿引用修改。<br>这样在洛谷上94ms过。<br>但BZOJ上TLE了（时限1000ms）。。。</p><p>于是我不得不常数优化。<br>把乘法改成乘等于，所有运算都是传引用，避免了频繁的复制操作。<br>结果洛谷上76ms，看起来没差多少<br>然而，BZOJ上108ms成功AC。。。</p><p>BZOJ是有毒吧，或者还是洛谷有毒？</p><p>所以告诉我们写高精是注意能引用就引用，尽量不要复制，常数很大的。</p><p>还有就是乘法运算进位不能直接加上去，要用一个变量先存一下，这个调了很久。（太菜了）</p><p>其实这个做法可以用差分序列来优化，复杂度小一些，也不用写乘法了，但我最后卡常成功（暗笑，冷笑）<br><a id="more"></a></p><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bigint</span>&#123;</span> <span class="keyword">int</span> n[<span class="number">10010</span>], len; &#125;f[<span class="number">110</span>], g[<span class="number">110</span>], ans, tmp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(bigint &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">"%d"</span>, a.n[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> += (bigint &amp;a, bigint &amp;b) &#123;</span><br><span class="line">    a.len = max(a.len, b.len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++)</span><br><span class="line">        a.n[i] += b.n[i], a.n[i+<span class="number">1</span>] += a.n[i] / <span class="number">10</span>, a.n[i] %= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(a.n[a.len]) a.len++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> *= (bigint &amp;a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) </span><br><span class="line">        a.n[i] *= b, a.n[i] += x, x = a.n[i] / <span class="number">10</span>, a.n[i] %= <span class="number">10</span>;</span><br><span class="line">    a.n[a.len] = x;</span><br><span class="line">    <span class="keyword">while</span>(a.n[a.len]) </span><br><span class="line">        a.n[a.len + <span class="number">1</span>] += a.n[a.len] / <span class="number">10</span>, a.n[a.len] %= <span class="number">10</span>, a.len++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    f[<span class="number">0</span>].n[<span class="number">0</span>] = <span class="number">1</span>; f[<span class="number">0</span>].len = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>].n[<span class="number">0</span>] = <span class="number">1</span>; f[<span class="number">1</span>].len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) </span><br><span class="line">            tmp = f[i - j], tmp *= j, f[i] += tmp;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; i &lt;&lt; ' '; print(f[i]);</span></span><br><span class="line">    ans += f[n]; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++) </span><br><span class="line">        tmp = f[n - j], tmp *= (j - <span class="number">1</span>) * j, ans += tmp;</span><br><span class="line">    print(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1002&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1002&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h1&gt;&lt;p&gt;组合数学，要么递推，要么通项公式&lt;br&gt;本题可以求出一个类递推式&lt;/p&gt;
&lt;p&gt;用一个类似dp的方法。考虑分配周围这个圆的联通，就是一个线性dp了，过程中考虑和中间点的联通。&lt;br&gt;令$f[i]$表示考虑了圆上的前i个的方案数&lt;br&gt;$$&lt;br&gt;f[i] = \sum_{j=1}^if[i-j]\times j&lt;br&gt;$$&lt;br&gt;但这相当于把环拆成了链，还要考虑1和n连接的情况。如果有j个周围的点连成一条，且跨越了1和n，我们将所有这样的情况累加到答案中去。考虑如果这样的点有j个，剩下的点肯定不与这j个点相连，所以连边方案数就是$f[i-j]​$，这j个点有$(j-1)​$种选法(跨越1和n)，与中心点连边的方案数是j。设这种情况为$g[i]$&lt;br&gt;$$&lt;br&gt;g[i] = \sum_{j=2}^if[i-j]\times j\times (j-1)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;剩下的就是高精了，建一个结构体，写一个加法和乘法。&lt;/p&gt;
&lt;p&gt;但这道题让我感受到了常数的力量。&lt;/p&gt;
&lt;p&gt;最开始我写了一个+=，写了一个*，乘法会返回一个大整数类型，加等于就直接穿引用修改。&lt;br&gt;这样在洛谷上94ms过。&lt;br&gt;但BZOJ上TLE了（时限1000ms）。。。&lt;/p&gt;
&lt;p&gt;于是我不得不常数优化。&lt;br&gt;把乘法改成乘等于，所有运算都是传引用，避免了频繁的复制操作。&lt;br&gt;结果洛谷上76ms，看起来没差多少&lt;br&gt;然而，BZOJ上108ms成功AC。。。&lt;/p&gt;
&lt;p&gt;BZOJ是有毒吧，或者还是洛谷有毒？&lt;/p&gt;
&lt;p&gt;所以告诉我们写高精是注意能引用就引用，尽量不要复制，常数很大的。&lt;/p&gt;
&lt;p&gt;还有就是乘法运算进位不能直接加上去，要用一个变量先存一下，这个调了很久。（太菜了）&lt;/p&gt;
&lt;p&gt;其实这个做法可以用差分序列来优化，复杂度小一些，也不用写乘法了，但我最后卡常成功（暗笑，冷笑）&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="组合" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="高精度" scheme="http://yoursite.com/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>最长不下降子序列问题</title>
    <link href="http://yoursite.com/2019/02/02/%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/02/02/最长不下降子序列问题/</id>
    <published>2019-02-02T13:12:02.000Z</published>
    <updated>2019-05-19T08:20:28.202Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络流24题 最长不下降子序列问题<br><a href="https://www.luogu.org/problemnew/show/P2766" target="_blank" rel="noopener">洛谷P2766</a><br><a id="more"></a></p></blockquote><h1><span id="问题描述">问题描述：</span></h1><p>给定正整数序列$x_1,…,x_n$ 。<br>（1）计算其最长不下降子序列的长度s。<br>（2）计算从给定的序列中最多可取出多少个长度为s的不下降子序列。<br>（3）如果允许在取出的序列中多次使用$x_1$和$x_n$，则从给定序列中最多可取出多少个长度为s的不下降子序列。<br>设计有效算法完成（1）（2）（3）提出的计算任务。</p><h1><span id="输入格式">输入格式：</span></h1><p>第1 行有1个正整数n，表示给定序列的长度。接下来的1 行有n个正整数$n:x_1, …, x_n$。</p><h1><span id="输出格式">输出格式：</span></h1><p>第1 行是最长不下降子序列的长度s。第2行是可取出的长度为s 的不下降子序列个数。第3行是允许在取出的序列中多次使用$x_1$和$x_n$时可取出的长度为s 的不下降子序列个数。</p><h1><span id="输入样例">输入样例</span></h1><p>4<br>3 6 2 5</p><h1><span id="输出样例">输出样例</span></h1><p>2<br>2<br>3</p><h1><span id="题解">题解</span></h1><p>（1）最基本的dp，记答案为ans<br>（2）每个数拆成两个点$a_i, b_i$，用$\to$代表连边：</p><ul><li>$ s\to a_i\ \ cap = 1\ \ \ \ if(f[i] = 1) $</li><li>$ b_i\to t\ \ cap = 1\ \ \ \ if(f[i] = ans) $</li><li>$ a_i\to b_i\ \ cap = 1 $</li><li>$ b_i\to a_i\ \ cap = 1\ \ \ \ if(h[i] \le h[j] 且f[i] + 1 = f[j]) $ 就是说j由i转移而来</li></ul><p>跑一遍最大流即可</p><p>（3）再加四条边</p><ul><li>$ s\to a_1\ \ cap = +\infty $</li><li>$ a_1\to b_1\ \ cap = +\infty $</li><li>$ b_n \to t\ \ cap = +\infty\ \ \ \ if(f[n] = ans)$</li><li>$ a_n\to b_n\ \ cap = +\infty $</li></ul><p>千万不要忘记了第三条边里的if，这是若不满足则不用加这条边，多的第n个数相当于没用。</p><p>这是最大流里比较经典的一个问题</p><h1><span id="代码">代码</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>, M = <span class="number">500000</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[N], f[N], head[N], ver[M], Next[M], edge[M], tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> s, t, d[N], maxflow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line"><span class="comment">// cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; ' ' &lt;&lt; z &lt;&lt; endl;</span></span><br><span class="line">ver[++tot] = y, edge[tot] = z,  Next[tot] = head[x], head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">q.push(s); d[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line"><span class="comment">// for(int i = 1; i &lt;= 10; i++) cout &lt;&lt; d[i] &lt;&lt; ' '; cout &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = Next[i]) <span class="keyword">if</span>(edge[i] &amp;&amp; !d[ver[i]]) &#123;</span><br><span class="line">d[ver[i]] = d[x] + <span class="number">1</span>;</span><br><span class="line">q.push(ver[i]);</span><br><span class="line"><span class="keyword">if</span>(ver[i] == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">int</span> g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i &amp;&amp; f - g; i = Next[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(d[ver[i]] == d[x] + <span class="number">1</span> &amp;&amp; edge[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> k = dinic(ver[i], min(edge[i], f - g));</span><br><span class="line"><span class="keyword">if</span>(!k) d[ver[i]] = <span class="number">0</span>;</span><br><span class="line">g += k;</span><br><span class="line">edge[i] -= k;</span><br><span class="line">edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">s = n + n + <span class="number">1</span>, t = n + n + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">f[i] = <span class="number">1</span>;</span><br><span class="line">add(i, i + n, <span class="number">1</span>); add(i + n, i, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) <span class="keyword">if</span>(a[j] &lt;= a[i]) f[i] = max(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) </span><br><span class="line"><span class="keyword">if</span>(a[j] &lt;= a[i] &amp;&amp; f[i] == f[j] + <span class="number">1</span>) add(j + n, i, <span class="number">1</span>), add(i, j + n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = max(ans, f[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(f[i] == <span class="number">1</span>) add(s, i, <span class="number">1</span>), add(i, s, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(f[i] == ans) add(i + n, t, <span class="number">1</span>), add(t, n + i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(bfs()) &#123;</span><br><span class="line"><span class="comment">// for(int i = 1; i &lt;= t; i++) cout &lt;&lt; d[i] &lt;&lt; ' '; cout &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">while</span>(flow = dinic(s, inf)) maxflow += flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; maxflow &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">add(<span class="number">1</span>, n + <span class="number">1</span>, inf); add(n + <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">add(n, n + n, inf); add(n + n, n, <span class="number">0</span>);</span><br><span class="line">add(s, <span class="number">1</span>, inf); add(<span class="number">1</span>, s, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(f[n] == ans) add(n + n, t, inf); add(t, n + n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(bfs()) <span class="keyword">while</span>(flow = dinic(s, inf)) maxflow += flow;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; maxflow &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网络流24题 最长不下降子序列问题&lt;br&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2766&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷P2766&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    
      <category term="网络流-最大流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4698 Sandy的卡片</title>
    <link href="http://yoursite.com/2019/02/02/BZOJ4698-Sandy%E7%9A%84%E5%8D%A1%E7%89%87/"/>
    <id>http://yoursite.com/2019/02/02/BZOJ4698-Sandy的卡片/</id>
    <published>2019-02-02T11:19:44.000Z</published>
    <updated>2019-05-19T08:41:04.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4698" target="_blank" rel="noopener">BZOJ4698</a></p></blockquote><h1><span id="solution">Solution</span></h1><p>题目中说道相同的子串，也就提示我们用后缀数组了。（这是套路）<br>把所有字符拼在一起，中间加一个不会出现的字符（这也是套路）<br>两个子串差一个固定的数，我们可以使用差分，求出相邻两个字符串的差，就转化为很裸的字符串相等了。（这还是套路）</p><p>构建后缀数组和lcp，二分答案，假设当前判断x是否可行。<br>从前向后扫描后缀数组，所有height大于等于x的后缀会把sa分成很多段。统计是否有一段出现了所有n个字符串。<br>统计的过程中可以使用v数组加时间戳维护，先处理出每个字符属于n个字符串中的哪个，统计过程中每遇到一个新的段就tim++，v数组在每次check开始时清就可以了，这样可以保证时间复杂度为O(nlogn)</p><p>最后二分出来的相同长度+1就是答案，之所以要加一是因为前面差分时去掉了第一个。</p><p>注意点：</p><ul><li>后缀数组的模板实在容易写错啊！！</li><li>统计时开启新的一段要把当前位置的这个字符算在里面（包括cnt=1和维护v）</li><li>拼在一起时加的那个字符最好不一样，至于为什么我还没有搞清楚，但最开始我放一样的字符似乎总有问题</li><li>差分的时候为了防止负数出现，要一起加一个值，最好是所有字符的max值</li></ul><p>总之就是一道很套路的题吧。<br><a id="more"></a></p><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s[N], t1[N], t2[N], sa[N], height[N], rankk[N], len, c[N], v[N], bel[N];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1010</span>][<span class="number">110</span>], mm[<span class="number">1010</span>], mx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> *x = t1, *y = t2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[i] = s[i]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[i]]] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - k; i &lt; n; i++) y[p++] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(sa[i] &gt;= k) y[p++] = sa[i] - k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[y[i]]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line"></span><br><span class="line">swap(x, y);</span><br><span class="line">p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">x[sa[i]] = y[sa[i]] == y[sa[i<span class="number">-1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i<span class="number">-1</span>] + k] ? p - <span class="number">1</span> : p++;</span><br><span class="line"><span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">m = p;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rankk[sa[i]] = i;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!rankk[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(k) k--;</span><br><span class="line"><span class="keyword">int</span> j = sa[rankk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(s[i + k] == s[j + k]) k++;</span><br><span class="line">height[rankk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line"><span class="keyword">int</span> tim = <span class="number">1</span>, cnt = <span class="number">1</span>; v[bel[sa[<span class="number">0</span>]]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(height[i] &lt; x) &#123;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt;= len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">tim++; cnt = <span class="number">1</span>; v[bel[sa[i]]] = tim;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[sa[i]] &gt; mx + mx) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(tim != v[bel[sa[i]]]) cnt++;</span><br><span class="line">v[bel[sa[i]]] = tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mm[i]); r = max(r, mm[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mm[i]; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]), mx = max(mx, a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= mm[i]; j++) </span><br><span class="line">bel[len] = i, s[len++] = a[i][j] - a[i][j<span class="number">-1</span>] + mx;</span><br><span class="line">s[len++] = mx + i + mx;</span><br><span class="line">&#125;</span><br><span class="line">swap(n, len);</span><br><span class="line">get_sa(mx + len + mx + <span class="number">2</span>); </span><br><span class="line">get_height();</span><br><span class="line"><span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) l = mid; <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=4698&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ4698&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h1&gt;&lt;p&gt;题目中说道相同的子串，也就提示我们用后缀数组了。（这是套路）&lt;br&gt;把所有字符拼在一起，中间加一个不会出现的字符（这也是套路）&lt;br&gt;两个子串差一个固定的数，我们可以使用差分，求出相邻两个字符串的差，就转化为很裸的字符串相等了。（这还是套路）&lt;/p&gt;
&lt;p&gt;构建后缀数组和lcp，二分答案，假设当前判断x是否可行。&lt;br&gt;从前向后扫描后缀数组，所有height大于等于x的后缀会把sa分成很多段。统计是否有一段出现了所有n个字符串。&lt;br&gt;统计的过程中可以使用v数组加时间戳维护，先处理出每个字符属于n个字符串中的哪个，统计过程中每遇到一个新的段就tim++，v数组在每次check开始时清就可以了，这样可以保证时间复杂度为O(nlogn)&lt;/p&gt;
&lt;p&gt;最后二分出来的相同长度+1就是答案，之所以要加一是因为前面差分时去掉了第一个。&lt;/p&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后缀数组的模板实在容易写错啊！！&lt;/li&gt;
&lt;li&gt;统计时开启新的一段要把当前位置的这个字符算在里面（包括cnt=1和维护v）&lt;/li&gt;
&lt;li&gt;拼在一起时加的那个字符最好不一样，至于为什么我还没有搞清楚，但最开始我放一样的字符似乎总有问题&lt;/li&gt;
&lt;li&gt;差分的时候为了防止负数出现，要一起加一个值，最好是所有字符的max值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之就是一道很套路的题吧。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="后缀数组" scheme="http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JSOI冬令营D2 题</title>
    <link href="http://yoursite.com/2019/01/28/JSOI%E5%86%AC%E4%BB%A4%E8%90%A5D2-%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/28/JSOI冬令营D2-题/</id>
    <published>2019-01-28T13:27:33.000Z</published>
    <updated>2019-01-29T14:38:54.728Z</updated>
    
    <content type="html"><![CDATA[<p>这场比赛真是不难啊不难，但是我还是只会写暴力啊暴力~~~</p><!-- toc --><ul><li><a href="#t1-箱子">T1 箱子</a></li><li><a href="#t2-准备">T2 准备</a></li><li><a href="#t3-回忆">T3 回忆</a></li></ul><!-- tocstop --><a id="more"></a><h1><span id="t1-箱子">T1 箱子</span></h1><p>考试时想了各种方法，什么dp、网络流、数据结构，总觉得昨天那么难，今天不可能只出一道贪心。结果谁知道，就是一道极水极水的小贪心。</p><p>$a \le b$ 的那部分显然按照a递增排序。</p><p>$a &gt; b$ 的部分按b递减排序。证明如下：<br>假设$ b_x &gt; b_y $<br>若x排在y的前面不合法，也就是$ sumV+b_x-a_x &lt; a_y $<br>则易得$ sumV + b_y - a_y &lt; a_x $<br>也就是说y排在x的前面也一定不合法。<br>所以x排在前面一定不会更差。<br>因此把b较大的x排在前面。</p><p>my代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c != <span class="string">'-'</span> &amp;&amp; (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)) c = getchar(); <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = getchar(); <span class="keyword">return</span> f * res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> v;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>&#123;</span> <span class="keyword">int</span> a, b; &#125;p[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(P x, P y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.a &lt; x.b) </span><br><span class="line"><span class="keyword">if</span>(y.a &lt; y.b) <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">if</span>(y.a &lt;= y.b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x.b &gt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"a.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"a.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> T; T = read();</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line">n = read(); v = read(); <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i].a = read(), p[i].b = read();</span><br><span class="line">sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(v - p[i].a &lt; <span class="number">0</span>) &#123; flag = <span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">v -= p[i].a; v += p[i].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1><span id="t2-准备">T2 准备</span></h1><p>事实上这题我在考场上想到正解了，只是最后没有调出来而已。后来发现有一个地方写错了一个字母。唉~。</p><p>考虑用一定计算过的答案得到下一次的答案，也就是维护。容易看出，只要知道每一次有多少个负数就可以$ O(1) $转移了。</p><p>而每一次有多少个负数实际上是内定了的，也就是根据$ a[i] $可以预处理出来。考虑每个$ a[i] $对他的贡献，也就是这个a何时会变成负的。所有这样的时刻都是区间，可以用差分实现。</p><p>代码实现时要注意差分的位置，我第一也在这个地方晕了。<br>其他没有什么难的。关键注意从不同角度思考问题吧。</p><p>my代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4000020</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll res = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c != <span class="string">'-'</span> &amp;&amp; (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)) c = getchar(); <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = getchar(); <span class="keyword">return</span> f * res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll a[N+N], n, ans = <span class="number">1e16</span>;</span><br><span class="line">ll s[N+N], b[N+N], res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"b.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"b.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(a[i] &lt; i) s[<span class="number">1</span>]++, s[i+<span class="number">1</span>-a[i]]--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i+<span class="number">1</span>]++, s[i + n - a[i] + <span class="number">1</span>]--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] = b[i<span class="number">-1</span>] + s[i];</span><br><span class="line"><span class="comment">//for(int i = 1; i &lt;= n; i++) cout &lt;&lt; b[i] &lt;&lt; ' '; cout &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) res += <span class="built_in">abs</span>(a[i] - i);</span><br><span class="line">ans = min(ans, res);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">res -= b[i<span class="number">-1</span>];</span><br><span class="line">res += n - b[i<span class="number">-1</span>];</span><br><span class="line">res -= a[i<span class="number">-1</span>];</span><br><span class="line">res += <span class="built_in">abs</span>(a[i<span class="number">-1</span>] - n);</span><br><span class="line">ans = min(ans, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1><span id="t3-回忆">T3 回忆</span></h1><p>其实我考试时也想到用线段树维护了，但但但，没有想到只要单点修改就可以。</p><p>我感觉这题就巧妙在这里，我们很容易想到用两个线段树分别维护$ l[i] - r[i] $和$ l[i] + r[i] $，但在哪些点上维护？有在哪个区间查询？</p><p>我们按l从小到大处理每个区间，把每个已处理过的区间的右端点在线段树上单点更新。查询时，不包含情况是查询$ [l,r] $，包含的情况查询$ [r, +\infty] $，这真巧妙，非常棒地区分了两种情况，还十分简洁。以后要记住这种方法。</p><p>细节部分脑补一下就可以了，别忘了离散化。</p><p>my代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, f = <span class="number">1</span>; <span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c != <span class="string">'-'</span> &amp;&amp; (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)) c = getchar(); <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = getchar(); <span class="keyword">return</span> f * res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans, refl[N+N], num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intv</span>&#123;</span> <span class="keyword">int</span> l, r; &#125;p[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(intv x, intv y)</span> </span>&#123; <span class="keyword">return</span> x.l == y.l ? x.r &gt; y.r : x.l &lt; y.l; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tr1[N*<span class="number">40</span>], tr2[N*<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> *tr, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[p] = inf;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(tr, p*<span class="number">2</span>, l, mid); build(tr, p*<span class="number">2</span>+<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> *tr, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    tr[p] = min(tr[p], x);</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid) change(tr, p*<span class="number">2</span>, l, mid, pos, x);</span><br><span class="line">    <span class="keyword">if</span>(pos &gt; mid) change(tr, p*<span class="number">2</span>+<span class="number">1</span>, mid + <span class="number">1</span>, r, pos, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> *tr, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tr[p];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, res = inf;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) res = min(res, query(tr, p*<span class="number">2</span>, l, mid, L, R));</span><br><span class="line">    <span class="keyword">if</span>(R &gt; mid) res = min(res, query(tr, p*<span class="number">2</span>+<span class="number">1</span>, mid + <span class="number">1</span>, r, L, R));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"c.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"c.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">n = read(); <span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i].l = read(), p[i].r = read(), refl[++num] = p[i].l, refl[++num] = p[i].r;</span><br><span class="line">sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n, cmp);</span><br><span class="line">    sort(refl + <span class="number">1</span>, refl + <span class="number">1</span> + num);</span><br><span class="line">    num = unique(refl + <span class="number">1</span>, refl + <span class="number">1</span> + num) - refl - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i].l = lower_bound(refl + <span class="number">1</span>, refl + <span class="number">1</span> + num, p[i].l) - refl, </span><br><span class="line">                                p[i].r = lower_bound(refl + <span class="number">1</span>, refl + <span class="number">1</span> + num, p[i].r) - refl;</span><br><span class="line">build(tr1, <span class="number">1</span>, <span class="number">1</span>, num); build(tr2, <span class="number">1</span>, <span class="number">1</span>, num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">tmp = query(tr1, <span class="number">1</span>, <span class="number">1</span>, num, p[i].l, p[i].r);</span><br><span class="line">        ans = max(ans, refl[p[i].r] + refl[p[i].l] - tmp);</span><br><span class="line">        tmp = query(tr2, <span class="number">1</span>, <span class="number">1</span>, num, p[i].r, num);</span><br><span class="line">        ans = max(ans, refl[p[i].l] - refl[p[i].r] - tmp);</span><br><span class="line">        change(tr1, <span class="number">1</span>, <span class="number">1</span>, num, p[i].r, refl[p[i].l] + refl[p[i].r]);</span><br><span class="line">        change(tr2, <span class="number">1</span>, <span class="number">1</span>, num, p[i].r, refl[p[i].l] - refl[p[i].r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>明天再接再厉，不信做不出来水题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这场比赛真是不难啊不难，但是我还是只会写暴力啊暴力~~~&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#t1-箱子&quot;&gt;T1 箱子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#t2-准备&quot;&gt;T2 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#t3-回忆&quot;&gt;T3 回忆&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="集训" scheme="http://yoursite.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="差分" scheme="http://yoursite.com/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>JSOI冬令营D1 题</title>
    <link href="http://yoursite.com/2019/01/28/JSOI%E5%86%AC%E4%BB%A4%E8%90%A5D1-%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/28/JSOI冬令营D1-题/</id>
    <published>2019-01-28T03:43:51.000Z</published>
    <updated>2019-01-29T14:49:17.367Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#t1-小l的占卜">T1 小L的占卜</a></li><li><a href="#t2-小f的星术">T2 小F的星术</a></li><li><a href="#t3-小x的咒语">T3 小X的咒语</a></li></ul><!-- tocstop --><a id="more"></a><h1><span id="t1-小l的占卜">T1 小L的占卜</span></h1><p>首先发现，T = 1时，问的就是区间异或和，因为偶数个数的异或和为0，剩下的只是奇数了。</p><p>当T = 2时，可以求出区间内所有出现过的数的异或和（每种数只算一次），然后异或掉区间异或和就可以了。<br>那么考虑怎么每种数只算一次。考虑离线操作。<br>把所有的操作按照左端点排序。先把每种数第一次出现的位置在树状数组上使能（也就是异或这个位置的数），然后从前往后扫描每一个询问，L向后推移，把L之前的数在树状数组上的贡献去掉，同时使能它下一次出现的位置。查询R的前缀异或和就可以了。</p><p>听说这是一个很套路的方法，但我真不会套路啊，学习了。</p><p>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, f = <span class="number">0</span>; <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(c != <span class="string">'-'</span> &amp;&amp; (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)) c = getchar(); <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">1</span>, c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">'0'</span>, c = getchar(); <span class="keyword">return</span> f ? -res : res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s[N], a[N], tmp[N], c[N], ans[N], p[N], num, na[N];</span><br><span class="line"><span class="keyword">int</span> nxt[N], v[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = p; p &lt;= n; p += p&amp;-p) c[p] ^= a[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; p; p -= p&amp;-p) res ^= c[p];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span> <span class="keyword">int</span> i, l, r, t; &#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Q x, Q y)</span> </span>&#123; <span class="keyword">return</span> x.l &lt; y.l; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"augury.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"augury.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> kase; kase = read();</span><br><span class="line">    n = read(), m = read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read(), p[++num] = a[i];</span><br><span class="line">    sort(p + <span class="number">1</span>, p + <span class="number">1</span> + num);</span><br><span class="line">    num = unique(p + <span class="number">1</span>, p + <span class="number">1</span> + num) - p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) na[i] = lower_bound(p + <span class="number">1</span>, p + <span class="number">1</span> + num, a[i]) - p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i<span class="number">-1</span>] ^ a[i];  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) q[i].l = read(), q[i].r = read(), q[i].t = read(), q[i].i = i;</span><br><span class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[na[i]]) add(i), v[na[i]] = i; </span><br><span class="line">        <span class="keyword">else</span> nxt[v[na[i]]] = i, v[na[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ll = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(ll &lt; q[i].l) add(ll), add(nxt[ll]), ll++;</span><br><span class="line">        ans[q[i].i] = s[q[i].r] ^ s[q[i].l - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(q[i].t == <span class="number">1</span>) ans[q[i].i] ^= query(q[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1><span id="t2-小f的星术">T2 小F的星术</span></h1><p>数学期望 + 树形dp，我们都知道，但怎么做呢，我连链的情况都没写出来~。</p><p>要先想到<br>$$<br>E(x) = P(x\ge 1) + P(x\ge 2) + P(x\ge 3) + …<br>$$<br>其中x为正整数。</p><p>也就是说，我们只要求出<strong>找到K条不相交路径的方案数</strong>，把他们加起来，在乘以$ \frac{n(n+1)}2 $的逆元就可以了。</p><p>这个和第二天讲的一道树形dp题一样。<br>用$ dp[i][j][0/1/2] $表示以i为根的子树，j条路径，i不取、i取且路径未结束、i取且路径无法向上延伸的方案数。</p><p>然后考虑状态转移，假设我们当前处于pos节点的儿子x处，dp[pos]记录的是x之前的信息，我们要把x的信息也合并进去。分类讨论。</p><p>这里情况比较繁琐，我看了很久才看懂标程，就不重新写一遍了，直接贴标程如下，转移写的很清楚:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">chkmax</span><span class="params">(T &amp;x, T y)</span> </span>&#123;x = max(x, y); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">chkmin</span><span class="params">(T &amp;x, T y)</span> </span>&#123;x = min(x, y); &#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(c); c = getchar()) <span class="keyword">if</span> (c == <span class="string">'-'</span>) f = -f;</span><br><span class="line"><span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar()) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">write(x);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, sz[MAXN], dp[MAXN][MAXN][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x += y;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= P) x -= P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">sz[pos] = <span class="number">1</span>;</span><br><span class="line">dp[pos][<span class="number">1</span>][<span class="number">0</span>] = dp[pos][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a[pos])</span><br><span class="line"><span class="keyword">if</span> (x != fa) &#123;</span><br><span class="line">work(x, pos);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> res[MAXN][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz[pos] + sz[x]; i++)</span><br><span class="line">res[i][<span class="number">0</span>] = res[i][<span class="number">1</span>] = res[i][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sz[pos]; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sz[x]; j++) &#123;</span><br><span class="line">update(res[i + j][<span class="number">0</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">0</span>] * dp[x][j][<span class="number">0</span>] % P);</span><br><span class="line"><span class="keyword">if</span> (i + j) update(res[i + j - <span class="number">1</span>][<span class="number">1</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">0</span>] * dp[x][j][<span class="number">0</span>] % P);</span><br><span class="line">update(res[i + j][<span class="number">0</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">0</span>] * dp[x][j][<span class="number">1</span>] % P);</span><br><span class="line"><span class="keyword">if</span> (i + j) update(res[i + j - <span class="number">1</span>][<span class="number">1</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">0</span>] * dp[x][j][<span class="number">1</span>] % P);</span><br><span class="line">update(res[i + j][<span class="number">0</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">0</span>] * dp[x][j][<span class="number">2</span>] % P);</span><br><span class="line"></span><br><span class="line">update(res[i + j][<span class="number">1</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">1</span>] * dp[x][j][<span class="number">0</span>] % P);</span><br><span class="line"><span class="keyword">if</span> (i + j) update(res[i + j - <span class="number">1</span>][<span class="number">2</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">1</span>] * dp[x][j][<span class="number">0</span>] % P);</span><br><span class="line">update(res[i + j][<span class="number">1</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">1</span>] * dp[x][j][<span class="number">1</span>] % P);</span><br><span class="line"><span class="keyword">if</span> (i + j) update(res[i + j - <span class="number">1</span>][<span class="number">2</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">1</span>] * dp[x][j][<span class="number">1</span>] % P);</span><br><span class="line">update(res[i + j][<span class="number">1</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">1</span>] * dp[x][j][<span class="number">2</span>] % P);</span><br><span class="line"></span><br><span class="line">update(res[i + j][<span class="number">2</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">2</span>] * dp[x][j][<span class="number">0</span>] % P);</span><br><span class="line">update(res[i + j][<span class="number">2</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">2</span>] * dp[x][j][<span class="number">1</span>] % P);</span><br><span class="line">update(res[i + j][<span class="number">2</span>], <span class="number">1l</span>l * dp[pos][i][<span class="number">2</span>] * dp[x][j][<span class="number">2</span>] % P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz[pos] + sz[x]; i++) &#123;</span><br><span class="line">dp[pos][i][<span class="number">0</span>] = res[i][<span class="number">0</span>];</span><br><span class="line">dp[pos][i][<span class="number">1</span>] = res[i][<span class="number">1</span>];</span><br><span class="line">dp[pos][i][<span class="number">2</span>] = res[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">sz[pos] += sz[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = power(x, y / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (y % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1l</span>l * tmp * tmp % P;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1l</span>l * tmp * tmp % P * x % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"astrology.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"astrology.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> num; read(num); read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y; read(x), read(y);</span><br><span class="line">a[x].push_back(y);</span><br><span class="line">a[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line">work(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>, tot = ((dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] + dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>]) % P + dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]) % P;</span><br><span class="line"><span class="keyword">int</span> fac = <span class="number">1</span>, frac = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">fac = <span class="number">1l</span>l * fac * i % P;</span><br><span class="line">frac = <span class="number">1l</span>l * frac * tot % P;</span><br><span class="line"><span class="keyword">int</span> now = ((dp[<span class="number">1</span>][i][<span class="number">1</span>] + dp[<span class="number">1</span>][i][<span class="number">2</span>]) % P + dp[<span class="number">1</span>][i][<span class="number">0</span>]) % P;</span><br><span class="line">update(ans, <span class="number">1l</span>l * now * fac % P * power(frac, P - <span class="number">2</span>) % P);</span><br><span class="line">&#125;</span><br><span class="line">writeln(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1><span id="t3-小x的咒语">T3 小X的咒语</span></h1><p>组合数学毒瘤题，推公式，要能够清晰地运用容斥原理，很难了。</p><img src="/2019/01/28/JSOI冬令营D1-题/1.JPG"><img src="/2019/01/28/JSOI冬令营D1-题/2.JPG"><img src="/2019/01/28/JSOI冬令营D1-题/3.jpg"><p>my proud code:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line">ll c[N][N], fac[N+N], rev[N], p, n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"abracadabra.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"abracadabra.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> kase; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;kase);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;p);</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + n; i++) fac[i] = fac[i<span class="number">-1</span>] * i % p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j]) % p;</span><br><span class="line">    rev[<span class="number">0</span>] = <span class="number">1</span>; rev[<span class="number">1</span>] = (p + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) rev[i] = rev[i<span class="number">-1</span>] * rev[<span class="number">1</span>] % p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k + j &lt;= n; k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + j + k &lt;= n; i++) &#123;</span><br><span class="line">                ll tmp = c[n][j] * c[n-j][k] % p * c[n-j-k][i] % p</span><br><span class="line">                     * c[j+k][j] % p * rev[j+k] % p * rev[k] % p * fac[j] % p * fac[<span class="number">2</span>*k+i] % p;</span><br><span class="line">                <span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">0</span>) ans = (ans + tmp) % p;</span><br><span class="line">                <span class="keyword">else</span> ans = (ans + tmp * (p<span class="number">-1</span>) % p) % p;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#t1-小l的占卜&quot;&gt;T1 小L的占卜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#t2-小f的星术&quot;&gt;T2 小F的星术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#t3-小x的咒语&quot;&gt;T3 小X的咒语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="集训" scheme="http://yoursite.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="树形动态规划" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>JSOI冬令营D2 课</title>
    <link href="http://yoursite.com/2019/01/28/JSOI%E5%86%AC%E4%BB%A4%E8%90%A5D2-%E8%AF%BE/"/>
    <id>http://yoursite.com/2019/01/28/JSOI冬令营D2-课/</id>
    <published>2019-01-28T00:02:11.000Z</published>
    <updated>2019-01-29T14:47:03.028Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="树形动态规划">树形动态规划</span></h1><p>一些关于树和dp的题，比较有难度，请谨慎<br><a id="more"></a></p><hr><blockquote><p>给定一个图G，求两点之间最短距离的最大值<br>G是普通图<br>G是树<br>G是基环树</p></blockquote><p>基环树情况：<br>先不考虑环，每一棵树求一个到根的最长路径。这棵树就没用了。然后把环拆成链，单调队列维护dp就可以。</p><hr><blockquote><p>给定一棵树T，求k条不想交的路径的方案数（点构成的路径）</p></blockquote><p>k = 2：<br>考虑树上的一条链有一个lca，这两条链的lca会有一个lca。<br>如果他们位于大lca的不同子树，则求出每个子树的大小，答案贡献为$<br>\sum_{u\not =v}C_{u+1}^2C_{v+1}^2<br>$<br>其中u、v为两棵子树，但这样需要$ O(n^2) $枚举，太慢了，变形为$(\sum_uC_{u+1}^2)^2-\sum_u(C_{u+1}^2)^2$<br>这样就可以$ O(n) $了<br>如果大lca就是其中一点，枚举另一点位置，另外一条链在这棵树剩下部分（也就是砍掉那棵子树），用组合数算就可以了。</p><p>k 任意<br>用$dp[i][j][0/1/2]$表示以i为根的子树，j条链，i取且其链继续向上扩展、i取但这条链已结束、i不取的方案数。<br>树形+背包dp<br>状态转移尚未搞懂，回头再说</p><hr><blockquote><p>给定一棵数，求最小点覆盖</p></blockquote><p>$ dp[i][0/1] $表示以i为根子树，i去或不取的最小点覆盖。<br>$ dp[i][0] = \sum_{fa[j] = i}dp[j][1] $<br>$ dp[i][1] = \sum_{fa[j] = i}max(dp[j][0], dp[j][1]) $</p><hr><blockquote><p>给定一棵树T，求所有简单路径边权积的和取模<br>SPOJ MTREE</p></blockquote><p>$ f[i] $表示从i往下的链积的和。可以维护出来$ f[i] $<br>然后枚举lca，求出$ \sum_{x\not=y}f[x] <em> w_x </em> f[y] * w[y] $，x、y为lca的子树，化简同上。</p><hr><blockquote><p>给定一个树T，在T上寻找两条严格不想交的路径，使其长度之积最大，求这个积。<br>SPOJ TWOPATHS</p></blockquote><p>分两种情况</p><ol><li>一条路径就是直径，另一条是其他路径中最大的</li><li>两条路径都只包含直径的一部分，枚举直径上相邻的两个点即可</li></ol><hr><blockquote><p>给定一棵树T，在T上先去掉一条边，再加上一条树边，重新构成一棵树T’，要使T’的直径最小，求一种方案。<br>SPOJ treecst</p></blockquote><p>加边时一定是加在两棵树直径的中点上。从根开始dfs枚举砍掉的边，维护两个直径，更新答案。</p><hr><blockquote><p>给定一棵树T，以及起点X终点Y，T上每一个节点都以给定的概率向其相邻的节点走，允许重复经过同一个点，求从X到Y的期望步数。<br>SPOJ GS</p></blockquote><p>以Y为根。<br>令$ f[i] $表示从i走到i的父亲的期望步数，$ p_i $表示i走向父亲的概率，$ p_{ij} $表示i走向第j个儿子的概率。<br>$ f[i] = p_i * 1 + \sum_{j=1}^kp_{ij}(1+f[son[i][j]] + f[i]) $ ，其中k为i的子树个数。<br>这事实上是一个方程，$ f[i] $为未知数，其他都是已求或已知的常量。手动求解即可。</p><hr><blockquote><p>给定一棵树或者基环树，以相等的概率选择一个起点，每一步等概率地走向未经过得点，求期望的移动步数<br>PS:给定的基环树中，环长不超过20<br>NOI2012 Day2 T1 迷失游乐园</p></blockquote><p>$ up[i] $表示从i向上走的期望步数。<br>$ down[i] $表示从i向下走的期望步数。<br>一遍dfs可以求出down，再一遍求出up，树的情况解决了。</p><p>基环树时，先对每个数向上面一样求down。<br>预处理出$ p[i][j][0/1] $表示从i顺/逆时针到j的概率。<br>之后dfs统计up，计算答案。</p><hr><blockquote><p>给定一棵带权无根树T，先选一点作为树根，然后每一步操作可以任选一点u，将树边$ (u,fa(u)), (fa(u), fa(fa(u))) $一起覆盖。同时，所有操作要满足，每条树边只被覆盖至多一次，求所有被覆盖的树边总长度的最大值。<br>APIO2014 T3 连珠线</p></blockquote><p>$ dp[i][0/1] $表示以i为根的子树，i是不是中间点，最大被覆盖边权<br>任选一个根，$ O(n) $求出所有dp值<br>然后考虑换根，选当前根的一个儿子作为新的根，对dp数组进行维护，可以$ O(1) $做到，多记录一些信息，和之前的转移是一样的。<br>取最大值即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树形动态规划&quot;&gt;&lt;a href=&quot;#树形动态规划&quot; class=&quot;headerlink&quot; title=&quot;树形动态规划&quot;&gt;&lt;/a&gt;树形动态规划&lt;/h1&gt;&lt;p&gt;一些关于树和dp的题，比较有难度，请谨慎&lt;br&gt;
    
    </summary>
    
      <category term="集训" scheme="http://yoursite.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="树形动态规划" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="基环树" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    
      <category term="树上乱搞" scheme="http://yoursite.com/tags/%E6%A0%91%E4%B8%8A%E4%B9%B1%E6%90%9E/"/>
    
  </entry>
  
  <entry>
    <title>组合数学整理集锦</title>
    <link href="http://yoursite.com/2019/01/23/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2019/01/23/组合数学整理集锦/</id>
    <published>2019-01-23T11:53:57.000Z</published>
    <updated>2019-02-05T13:09:32.277Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#排列的生成">排列的生成</a><ul><li><a href="#按字典序思想生成下一个排列">按字典序思想生成下一个排列</a></li></ul></li><li><a href="#排列和组合的计数">排列和组合的计数</a><ul><li><a href="#基本组合恒等式">基本组合恒等式</a></li><li><a href="#两种特殊的排列组合技术公式">两种特殊的排列组合技术公式</a><ul><li><a href="#catalan数">Catalan数</a><ul><li><a href="#公式">公式</a></li><li><a href="#应用">应用</a></li><li><a href="#操练">操练</a></li></ul></li><li><a href="#bell数">Bell数</a></li><li><a href="#stirling数">Stirling数</a></li></ul></li><li><a href="#多重集的排列组合">多重集的排列组合</a><ul><li><a href="#多重集的排列">多重集的排列</a></li><li><a href="#多重集的组合">多重集的组合</a></li></ul></li></ul></li><li><a href="#容斥原理与鸽笼原理">容斥原理与鸽笼原理</a><ul><li><a href="#鸽笼原理">鸽笼原理</a></li><li><a href="#容斥原理">容斥原理</a><ul><li><a href="#计算并集元素个数">计算并集元素个数</a></li><li><a href="#计算错排的方案数">计算错排的方案数</a></li></ul></li><li><a href="#ramsey定理">Ramsey定理</a><ul><li><a href="#ramsey数">Ramsey数</a></li></ul></li></ul></li><li><a href="#波利亚定理">波利亚定理</a><ul><li><a href="#定义们">定义们</a></li><li><a href="#bornside引理">Bornside引理</a></li><li><a href="#波利亚定理-1">波利亚定理</a></li></ul></li><li><a href="#递推与生成函数">递推与生成函数</a><ul><li><a href="#k阶常系数线性齐次递推关系">k阶常系数线性齐次递推关系</a></li><li><a href="#生成函数">生成函数</a></li></ul></li></ul><!-- tocstop --><a id="more"></a><h1><span id="排列的生成">排列的生成</span></h1><h2><span id="按字典序思想生成下一个排列">按字典序思想生成下一个排列</span></h2><p>设当前序列为$ (p) = p_1p_2p_3…p_n $，按字典序思想生成下一个排列方法如下：</p><ol><li>从右向左，计算最后一个<strong>増序</strong>的尾元素的下标i，即$ i = max{j\ |\ p_{j-1} &lt; p_j,\ p_j \ge p_{j+1} } $</li><li>从右向左找到$p_{i-1}$后面比$p_{i-1}$大的最后一个元素的下标j，即$j = max{ k\ |\ k \ge i,\ p_{i-1} &lt; p_k }$</li><li>交换$p_{i-1}$与$p_j$，得到$p_1…p_{i-2}p_jp_ip_{i+1}…p_{j-1}p_{i-1}p_{j+1}…p_n$</li><li>翻转新的$p_j$后面的元素，使其递增（也就是说原来是递减的），得到$p_1…p_{i-2}p_jp_n…p_{j+1}p_{i-1}p_{j-1}…p_{i+1}p_i$</li></ol><p>原理想想就明白啦，下面有一道题：</p><blockquote><p><a href="http://poj.org/problem?id=1146" target="_blank" rel="noopener">POJ1146 ID Codes</a></p></blockquote><p>就是一道很裸的题，直接来代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) &amp;&amp; <span class="built_in">strcmp</span>(str, <span class="string">"#"</span>)) &#123; </span><br><span class="line">        len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i<span class="number">-1</span>] &lt; str[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt;= i; j--) <span class="keyword">if</span>(str[i<span class="number">-1</span>] &lt; str[j]) &#123; swap(str[i<span class="number">-1</span>], str[j]); <span class="keyword">break</span>; &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= len - (j - i + <span class="number">1</span>); j++) swap(str[j], str[len - (j - i + <span class="number">1</span>)]);</span><br><span class="line">                <span class="built_in">puts</span>(str); flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">"No Successor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再说一句，要注意看清楚流程中的大于号和大于等于号，另外就是当找不到时代表已经找完了，这就是最后一个，算法结束。</p><h1><span id="排列和组合的计数">排列和组合的计数</span></h1><h2><span id="基本组合恒等式">基本组合恒等式</span></h2><p>$$<br>\sum_{i=0}^{n} {n \choose i} = 2 ^ n $$$$<br> \sum_{i=0}^{n} {i \choose x} = {n+1 \choose x+1} $$$$<br> \sum_{i=0}^{n} {k+i \choose i} = {k+n+1 \choose n} $$$$<br> \sum_{i=0}^{m} {m \choose i} {n-m \choose m-i} = {n \choose m}<br>$$</p><h2><span id="两种特殊的排列组合技术公式">两种特殊的排列组合技术公式</span></h2><h3><span id="catalan数">Catalan数</span></h3><h4><span id="公式">公式</span></h4><blockquote><p>Catalan数是序列｛C｝，其中 $ C_0=1,\ C_1=1,$$$C_n = C_0C_{n-1}+C_1C_{n-2}+…+C_{n-1}C_0,\ n\ge2. $$</p></blockquote><p>在定义中就已经给出了它最一般的递推式，下面还有几个计算是很常用的：</p><blockquote><p>变形递推式$$ C_n = \frac{4n-2}{n+1}\times C_{n-1}, n &gt; 1 $$</p></blockquote><blockquote><p>通项公式$$ C_n = \frac{C(2n, n)}{n+1}, n = 0, 1, 2… $$$$C_n=C(2n,n)-C(2n,n+1),n=0,1,2…$$</p></blockquote><p>酌情使用，方便为上<br>要注意卡特兰数的下标从0开始，不要随意改，会出现意想不到的问题。</p><h4><span id="应用">应用</span></h4><ol><li><p>由n个1和n个0构成2n项满足所有前缀中1比0多的序列个数等于第n个Catalan数。<br>证明：我们先求出所有的序列，然后减去不合法的序列即是答案。所有序列个数直接根据组合数的定义为$C(n,2n)$，现在要证明满足存在一个结论中所说的序列与n+1个0与n-1个1构成的01序列构成一个双射，即11对应关系，因为很显然，后者的数量为$C(n−1,2n)$。<br>对前者，很显然可以找到一个位置为$2p+1$的前缀，使得其中有$p+1$个1和$p$个0，好的我们把它取反，即得到了后者。对后者，同理。于是得到了上述第二个通项公式。<br>&emsp;</p></li><li><p>我们可以将应用1变换形式：将1看成右括号，0看成左括号，就变成了左括号和右括号各有n个时，合法括号表达式的个数。比如2个左括号和2个右括号组成的合法表达式有种，是()()和(())。<br>&emsp;</p></li><li><p>n个节点构造二叉树的所有可能形态数为$C_n$。<img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/Catalan_number_binary_tree_example.png" alt=""><br>考虑随便取一个节点作为根，那么他左边和右边的儿子节点个数就确定了，假定根节点标号为x，那么左子树的标号就是从1到x-1,共x-1个，右子树的标号就是从x+1到n，共n-x个，那么将x从1取到n，就获得了所有的情况数。得到的为定义递推式。<br>&emsp;</p></li><li><p>n个非叶节点的满二叉树的形态数（对称后得到的二叉树除非自己本身对称，否则算是不同）。对于满二叉树，实际上就是将应用4中的每个子节点的空儿子上都加上叶子，就形成了对应的满二叉树，那么n个非叶节点形成的满二叉树的形态数即为$C_n$<br>&emsp;</p></li><li><p>对于一个n*n的正方形网格，每次只能向右或者向上移动一格，那么从左下角到右上角所有在副对角线右下方的路径总数为$C_n$。<img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/450px-Catalan_number_4x4_grid_example.svg.png" alt=""><br>可以将一条水平边记为+1,垂直边记为-1,那么就组成了一个n个+1和n个-1的序列，并且保证前k步中水平边数不小于垂直边数，换句话说前k个元素的和非负。<br>&emsp;</p></li><li><p>对凸n+2边形进行不同的三角形分割（只连接顶点对形成n个三角形）数为$C_n$<br><img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/400px-Catalan-Hexagons-example.svg.png" alt=""><br>&emsp;</p></li><li><p>n个数入栈后的出栈的排列总数是$C_n$。例如1,2,3入栈的出栈排序有123，132，213，231和321五种<br>&emsp;</p></li><li><p>n层的阶梯切割为n个矩形的切法数也是。如下图所示：<img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/400px-Catalan_stairsteps_4.svg.png" alt=""><br>考虑先绘制如下图片，即n为5的时候的阶梯：<br><img src="http://daybreakcx.is-programmer.com/user_files/daybreakcx/Image/stairs.png" alt=""><br>注意到每个切割出来的矩形都必需包括一块标示为*的小正方形，那么此时枚举每个*与#标示的两角作为矩形，剩下的两个小阶梯就是我们的两个更小的子问题了。</p></li></ol><p>&emsp;<br>事实上，从应用中我们也可以看到很多证明通项公式的方法。</p><h4><span id="操练">操练</span></h4><p>给道题目吧：</p><blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2822" target="_blank" rel="noopener">BZOJ2822: [AHOI2012]树屋阶梯</a></p></blockquote><p>卡特兰数+高精度，比较裸，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;l = a[<span class="number">0</span>]; <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; i++)&#123;</span><br><span class="line">        a[i] = a[i] * x + left;</span><br><span class="line">        left = a[i] / mod;</span><br><span class="line">        a[i] = a[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left) a[++l] = left % mod, left /= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;l = a[<span class="number">0</span>]; <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i; i--)&#123;</span><br><span class="line">        a[i] += left * mod;</span><br><span class="line">        left = a[i] % x;</span><br><span class="line">        a[i] /= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!a[l]) l--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = a[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[l]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l - <span class="number">1</span>; i; i--) <span class="built_in">printf</span>(<span class="string">"%04d"</span>, a[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a[<span class="number">0</span>] = a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) mul(a, i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) div(a, i);</span><br><span class="line">    div(a, n + <span class="number">1</span>);</span><br><span class="line">    print(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="bell数">Bell数</span></h3><blockquote><p>Bell数是集合的划分数，也是一个集合上的等价关系的数目；Bell数{B}, 其中$B_n$是包含n个元素的集合的划分方法的数目。显然，$B_0=1, B_1=1, B_2=2, B_3=5$$$B_{n+1} = \sum_{k=0}^nC(n, k)B_k $$</p></blockquote><p>很简单吧</p><h3><span id="stirling数">Stirling数</span></h3><blockquote><p>第一类Stirling数是将n个不同元素放入m个环排列的数目。其中，$S(n, 0)=0,\ S(1,1)=1$$$S(n, m) = S(n-1, k-1) + (n-1)*S(n-1, m)$$</p></blockquote><img src="/2019/01/23/组合数学整理集锦/stirling1.jpg"><p>生成函数:<br>$$<br>\begin{aligned}<br>&amp; x^{\overline{n}} = \sum_{i=0}^{n} \begin{bmatrix} n \ i \end{bmatrix} x^i \<br>&amp; x^{\underline{n}}= \sum_{i=0}^{n} (-1)^{n-i} \begin{bmatrix} n \ i \end{bmatrix} x^i<br>\end{aligned}<br>$$</p><blockquote><p>第二类Stirling数是将n个元素的集合划分为k个不为空的子集的方式的个数，其中$S(n, n) = S(n, 1) = 1 $$$S(n, m) = S(n-1, m-1) + k * S(n-1, m) $$</p></blockquote><img src="/2019/01/23/组合数学整理集锦/stirling2.jpg"><p>生成函数:</p><p>$$<br>\begin{aligned}<br>&amp; x^n = \sum_{i=0}^{n} {n \brace i} x^{\underline{i}} \<br>&amp; m!{n \brace m} = \sum_{i=0}^{m} (-1)^{m-i} {m \choose i} i^n<br>\end{aligned}<br>$$</p><h2><span id="多重集的排列组合">多重集的排列组合</span></h2><blockquote><p>多重集是可重复出现的元素组成的集合。若多重集中不同元素个数为k，称该多重集为k元多重集。多重集中元素$a_i$出现的次数$n_i$称为元素$ai$的重数。若有限多重集S有$a_1, a_2, …, a_k$共k个不同元素，且ai的重数为ni，则S可记为：${ n_1•a_1, n_2•a_2, ……, n_k•a_k }$。</p></blockquote><img src="/2019/01/23/组合数学整理集锦/multi.jpg"><h3><span id="多重集的排列">多重集的排列</span></h3><blockquote><p>设有限多重集$S={ n_1•a_1, n_2•a_2, …, n_k•a_k }$，且$n=n_1+n_2+ ……+n_k$，从S中有序选取r个元素称为S的一个r-排列$(r\le|S|=n)$，当$r=n$时，称为S的一个全排列。</p></blockquote><p>从k元多重集$S= { \infty•a_1,  \infty•a_2, …,  \infty•a_k }$中有序选取r个元素我们也称为S的一个r-排列。</p><blockquote><p>设k元多重集$S= { \infty•a_1, \infty•a_2, …, \infty•a_k }$，则S的r-排列数是$k^r$。</p></blockquote><p>证明太简单，不写了。</p><h3><span id="多重集的组合">多重集的组合</span></h3><blockquote><p>设多重集$S={ n_1•a_1, n_2•a_2, ……, n_k•a_k }$，（这里$n_i$可以是有限也可以是无限的）。S的含有r个元素的子多重集称为S的r-组合。</p></blockquote><blockquote><p>设k元多重集$S= { \infty•a_1, \infty•a_2, …, \infty•a_k }$，设$r\le n_i(\forall i \in [1, k])$则S的r-组合数是$$C_{k+r-1}^r$$</p></blockquote><p>证明：<br>原问题等价于统计下列集合的数量：$ { x_1\cdot a_1, x_2\cdot a_2,…,x_k\cdot a_k } $，其中，$ \sum_{i=1}^k x_i = r $并且$x_i\le n_i$，故原问题等价于r个0，k-1个1构成的全排列数——k-1个1把r个0分成k组，每组的0的数量对应$x_i$。而多重集${ r\cdot 0, (k-1)\cdot 1 }$的全排列数为$$ \frac{(r+k-1)!}{r!(k-1)!} = C_{k+r-1}^r = C_{k+r-1}^{k-1} $$</p><p>对于更为一般的r的情况，需要用到下面的容斥原理，之后再说，敬请期待。</p><h1><span id="容斥原理与鸽笼原理">容斥原理与鸽笼原理</span></h1><h2><span id="鸽笼原理">鸽笼原理</span></h2><img src="/2019/01/23/组合数学整理集锦/cage.jpg"><p>应用鸽笼原理解题的一般步骤：</p><ul><li>分析题意，分清什么是“元素”，什么是“集合”；也就是说，什么可以作为“元素”，什么可以作为“集合”。</li><li>构造集合。这是关键的一步。根据题目条件和结论，结合有关的数学知识，抓住最基本的数量关系，设计和确定解决问题所需的集合及其个数，为应用鸽笼原理奠定基础。<br>应用鸽笼原理解题。</li></ul><p>有一道题目，比较巧妙，巧妙在思路上，代码并不复杂</p><blockquote><p><a href="http://poj.org/problem?id=2356" target="_blank" rel="noopener">POJ2356 Find a multiple</a></p></blockquote><img src="/2019/01/23/组合数学整理集锦/solution1.jpg"><p>鸽笼原理主要还是在于能不能想得到，解决的题目往往令人惊叹，比如这一题，结合起算法中常用的前缀和，就非常非常巧妙。还是要灵活运用啊。</p><h2><span id="容斥原理">容斥原理</span></h2><img src="/2019/01/23/组合数学整理集锦/capdefine.jpg"><p>定义就是这样，开启我们的练习吧——</p><h3><span id="计算并集元素个数">计算并集元素个数</span></h3><blockquote><p><a href="https://vjudge.net/problem/URAL-1091" target="_blank" rel="noopener">Ural 1091 Tmutarakan Exams</a> (这是vjudge上的网址哦)</p></blockquote><img src="/2019/01/23/组合数学整理集锦/solution2.jpg"><p>AC代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k, s, p[<span class="number">60</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans, c[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= s; i++) <span class="keyword">if</span>(x % i == <span class="number">0</span> &amp;&amp; !p[i] &amp;&amp; !p[x / i] &amp;&amp; i != x / i) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;k, &amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s; i++) c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) c[i][j] = c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j];</span><br><span class="line">    p[<span class="number">0</span>] = p[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= s; i++) <span class="keyword">if</span>(!p[i]) <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= s; j += i) p[j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= s; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!p[i]) &#123; </span><br><span class="line">            ans += c[(s - i) / i + <span class="number">1</span>][k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(judge(i)) ans -= c[(s - i) / i + <span class="number">1</span>][k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(ans, (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">10000</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是一道难一点的</p><blockquote><p><a href="https://vjudge.net/problem/ZOJ-3638" target="_blank" rel="noopener">ZOJ3638 Fruit Ninja</a></p></blockquote><p>下面是我的不知为何没有AC的代码，segment falt，但样例至少是可以过得，一般这种时候我就认为它对了，总之贴出来吧（不过话说这题的输入格式好恶心啊）：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">100000007</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, gr, le[<span class="number">20</span>], cnt, num[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line">ll c[<span class="number">10000100</span>][<span class="number">20</span>], ans;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000</span>], tmp1[<span class="number">1000</span>], ty[<span class="number">1000</span>], tmp2[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">17</span>); i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j; j -= j&amp;-j) num[i]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1e7</span>+<span class="number">20</span>; i++) c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e7</span>+<span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">18</span>; j++) c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j]) % mod;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span> &amp;&amp; (n || m != <span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        ans = gr = cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*getchar();</span></span><br><span class="line"><span class="comment">       while(1) &#123;</span></span><br><span class="line"><span class="comment">            getline(cin, str);</span></span><br><span class="line"><span class="comment">            strcpy(s, str.c_str());</span></span><br><span class="line"><span class="comment">            if(!strcmp(s, "")) break;</span></span><br><span class="line"><span class="comment">            sscanf(s, "%s%s%s%d", tmp1, ty, tmp2, &amp;x);</span></span><br><span class="line"><span class="comment">            if(ty[0] == 'g') gr += x + 1;</span></span><br><span class="line"><span class="comment">            else if(ty[0] == 'l') le[cnt++] = x;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        gets(s);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!gets(s)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strlen</span>(s) &lt; <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">sscanf</span>(s,<span class="string">"%s %s %s %d"</span>,tmp1,ty,tmp2,&amp;x);</span><br><span class="line">            <span class="keyword">if</span>(ty[<span class="number">0</span>] == <span class="string">'g'</span>) gr += x + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> le[cnt++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; cnt); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++) <span class="keyword">if</span>(i &amp; (<span class="number">1</span> &lt;&lt; j)) cur += le[j];</span><br><span class="line">            <span class="keyword">if</span>(n + m - gr - cur - <span class="number">1</span> &gt;= <span class="number">0</span>) ans = (ans + <span class="number">1l</span>l * (num[i] % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>) * c[n + m - gr - cur - <span class="number">1</span>][n - <span class="number">1</span>] % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;<br>还记得在上面讲多重集的时候说，r任意的情况要使用容斥原理讨论吗，事实上，上一题已经利用了这一方法。这里再系统讲一下。</p><blockquote><p>设多重集$  $。对于任意整数$  $，从S中取出r个元素组成一个多重集(不考虑顺序)，产生的不同的多重集的数量为$$<br> C_{k+r-1}^{k-1}- \sum_{i=1}^kC_{k+r-n_i-2}^{k-1} + \sum_{1\le i &lt; j \le k}C_{k+r-n_i-n_j-3}^{k-1} - …+(-1)^kC_{k+r-\sum_{i=1}^kn_i-(k+1)}^{k-1}$$</p></blockquote><p><em>证明</em>：<br>不考虑$n_i$的限制，从S中任选r个元素，相当于上一节讨论过的情况，方法数为$C_{k+r-1}^{k-1}$。<br>设$S_i(1\le i\le k)$表示至少包含$n_i+1$个$a_i$的多重集。我们先从S中取出$n_i+1$个$a_i$，然后在任选$r-n_i-1$个元素，即可构成$S_i$。与上面同理，可以构成的不同的$S_i$的数量为$C_{k+r-n_i-2}^{k-1}$<br>进一步地，先从S中取出$n_i+1$个$a_i$和$n_j+1$个$a_j$，然后在任选$r-n_i-n_j-2$个元素，即可构成$S_i\cap S_j$，方法数为$C_{k+r-n_i-n_j-3}^{k-1}$。<br>根据容斥原理，至少有一种$a_i$选取的数量超过$n_i$限制的多重集共有：$$ \begin{vmatrix} \bigcup_{i=1}^kS_i\end{vmatrix} = \sum_{i=1}^kC_{k+r-n_i-2}^{k-1} - \sum_{1\le i &lt; j \le k}C_{k+r-n_i-n_j-3}^{k-1} + …-(-1)^kC_{k+r-\sum_{i=1}^kn_i-(k+1)}^{k-1}  $$<br>故所有满足限制的合法多重集个数即为上述结论。<br><em>证毕</em>。<br>&emsp;<br>总结一下：<br>从上面的应用也可以发现，使用容斥原理时常常使用补集转换思想，先求出题目所要求的补集，它往往是很多子集的并集，可以用容斥原理轻松解决。在这个过程中，“至少”，“有”，“存在”等字眼应相当重视，往往涉及到思路是否清晰。</p><h3><span id="计算错排的方案数">计算错排的方案数</span></h3><img src="/2019/01/23/组合数学整理集锦/otherway.jpg"><p>递推法:<br>设n个元素$a_1, a_2, …, a_n$，错排数目为$D_n$。任取其中一个元素，错排产生有两种情况：<br>情况1：$a_i$与其它$n-1$个元素之一互换，其余$n-2$个元素错排。根据乘法原理，共产生$(n-1) D_{n-2}$个错排；<br>情况2：$a_i$以外的$n-1$个元素先错排，然后$a——i$与其中每个元素互换。根据乘法原理，共产生$(n-1) D_{n-1}$个错排；<br>使用加法原理综合上述情况，可得出递推式：<br>$D_1=0；D_2=1；D_n=(n-1)(D_{n-2}+ D_{n-1})$，其中$n&gt;2$。<br>注意：当$n$较大时，错排数可能会超过任何整数类型允许的范围。在这种情况下一般采用高精度运算，以避免数据溢出。</p><p>依旧一道水题练练手</p><blockquote><p><a href="https://vjudge.net/problem/UVA-10497" target="_blank" rel="noopener">UVA10497 Sweet Child Makes Trouble</a></p></blockquote><p>错排裸题+高精，水题不解释，代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">810</span>][<span class="number">10010</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">800</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">10000</span>; j++) f[i][j] += f[i<span class="number">-1</span>][j] + f[i<span class="number">-2</span>][j], f[i][j+<span class="number">1</span>] += f[i][j] / <span class="number">10000</span>, f[i][j] %= <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">10000</span>; j++) f[i][j] *= i - <span class="number">1</span>, f[i][j] += x, x = f[i][j] / <span class="number">10000</span>, f[i][j] %= <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">while</span>(!f[n][i] &amp;&amp; i) i--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>, f[n][i--]);</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%04lld"</span>, f[n][i--]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="ramsey定理">Ramsey定理</span></h2><blockquote><p>对于任何一个具有6个节点的简单图，要么它包含一个三角形，要么它的补图包含一个三角形。</p></blockquote><p><em>证明：</em><br>设6个节点的简单图为G。考察G中的任意一个节点a，那么，另外5个节点中的任何一个节点，要么在G中与a邻接，要么在G’（G的补图）中与a邻接。这样，就可以把5个节点分成两类：在G中与a邻接，或在G’中与a邻接。<br>因此，根据鸽笼原理，必有一类至少含有3个节点，不妨假设其中的3个节点b, c, d与a邻接。<br>如果b, c, d间有边相连，则命题成立；否则在补图中b, c, d任意两点间有边相连，命题成立。</p><blockquote><p>Ramsey定理  6个人中至少存在3人相互认识或者相互不认识。</p></blockquote><h3><span id="ramsey数">Ramsey数</span></h3><blockquote><p>对于正整数a和b，对应于一个整数r，使得r个人中或有a个人相互认识，或有b个人互不认识；或有a个人互不认识，或有b个人相互认识。这个数r的最小值用R(a, b)来表示。<br>R(3, 3)=6。<br>Ramsey数还有若干推论：R(3, 4)=9，R(4, 4)=18。</p></blockquote><blockquote><p>Ramsey数有如下性质。<br>$R(a, b)= R(b, a)；R(a, 2)=2$。<br>对任意的整数$a, b \ge 2$，$R(a, b)$存在。<br>对任意的整数$a, b，R(a, b)\le R(a-1, b)+ R(a, b-1)$；<br>如果$a, b \ge 2，且R(a-1, b)$和$R(a, b-1)$是偶数，则<br>$$R(a, b)\le R(a-1, b)+ R(a, b-1)-1。<br>R(a, b)\le C(a+b-2, a-1)。$$</p></blockquote><h1><span id="波利亚定理">波利亚定理</span></h1><p>终于写到这了，首先要介绍群论：</p><h2><span id="定义们">定义们</span></h2><p>群的定义</p><blockquote><p>一个群是一个集合G和一个在集合G上被称为G的群法则的操作，这一操作将任意两个元素a和b合成为一个新元素，标志为a * b或ab。(G, *)满足下述4个条件。<br>[1] 封闭性；对于任意$a, b\in G，a<em>b\in G$。<br>[2] 结合律；对于任意$a, b, c\in G，(a</em>b)<em>c = a</em>(b<em>c)$。<br>[3] 存在单位元素；在G中存在一个元素e，使得对于任意$a\in G，e</em>a = a<em>e = a$。<br>[4] 存在逆元素；对于任意$a\in G$，在G中存在元素$b$，使得$a</em>b = b*a = e$，其中$e$是单位元素。</p></blockquote><p>置换的定义：</p><blockquote><p>设集合A由n个不同元素$a_1, a_2, …, a_n$组成。A中的元素之间的一个置换是$a_1$被A中的某个元素$b_1$所取代，$a_2$被A中的某个元素$b_2$所取代，…，$a_n$ 被A中的某个元素$b_n$；并且$b_1, b_2, …, b_n$互不相同。</p></blockquote><p>置换群：</p><blockquote><p>一个置换群是一个群(G, *)，其元素是${a_1, a_2, ……, a_n}$的置换，而*是置换的合成。<br>也就是说，置换群的元素是置换，操作是置换的合成。Pólya计数公式基于置换群。</p></blockquote><img src="/2019/01/23/组合数学整理集锦/xunhuan.jpg"><p>例如，{1, 2, 3, 4}的所有置换<br>$S_4＝{(1)(2)(3)(4), (12), (13), (14), (23), (24), (34),$<br>$ (123), (124), (132), (134), (142), (143), (234), (243), $<br>$(1234), (1243), (1324), (1342), (1423), (1432), $<br>$(12)(34), (13)(24), (14)(23)}$。</p><img src="/2019/01/23/组合数学整理集锦/xunhuan2.jpg"><p>在$S_4$中，具有相同格式的置换所示如下：<br>$(1)^0(2)^2(3)^0(4)^0$，也就是$(2)^2$，有3个置换：<br>$(12)(34)，(13)(24)$和$(14)(23)$；<br>$(1)^1(3)^1$有8个置换：$(123)，(124)，(132)，(134)，(142)，(143)，(234)$和$(243)$；<br>$(1)^2(2)^1$有6个置换：<br>$(12)，(13)，(14)，(23)，(24)$和$(34)$；<br>$(1)^4$只有1个置换：<br>$(1)(2)(3)(4)$；<br>$(4)^1$有6个置换：<br>$(1234)，(1243)，(1324)，(1342)，(1423)$和$(1432)$。</p><p>共轭类以及其计算定理：<br><img src="/2019/01/23/组合数学整理集锦/共轭类.jpg"></p><p>K不动置换类：</p><blockquote><p>设$K$是${1, 2, …, n}$中的一个数。$G$中使$K$保持不变的置换全体，记为$Z_K$，叫做$G$中使$K$不动的置换类，或简称K不动置换类。</p></blockquote><p>例如，$G={e, (1 2), (3 4), (1 2)(3 4)}。Z_1={e, (3 4)}；Z_2={e, (3 4)}；Z_3={e, (1 2)}；Z_4＝{e, (1 2)}。e$是单位元。显然，$Z_K$是$G$的子群，$K$是${1, 2, 3, 4}$中的一个数。对于$G$，在这一置换下，1可以置换为2，2可以置换为1；3可以置换为4，4可以置换为3。但1或2不可能置换为3或4，而且3或4也不可能置换为1或2。所以，1和2在一个等价类中，3和4在另一个等价类中。</p><p>等价类：</p><blockquote><p>设G是${1, 2, …, n}$的置换群，K是${1, 2, …, n}$中的一个数。在这一置换下，${1, 2, …, n}$可以被划分为若干等价类，K所属的等价类记为$E_K$。</p></blockquote><p>例如，$G={e, (1 2), (3 4), (1 2)(3 4)}$。1和2在一个等价类中，3和4在另一个等价类中。$E_1=E_2={1, 2}，E_3=E_4={3, 4}$。<br>因此，对于数$K，1\le K\le 4$，置换群G有对应的等价类$E_K$和不动置换类$Z_K$。</p><p>长舒一口气，终于介绍完定义了。<br>下面，最关键部分来了。</p><h2><span id="bornside引理">Bornside引理</span></h2><p>一个小结论，但很重要：</p><blockquote><p>设G是${1, 2, …, n}$的置换群，K是${1, 2, …, n}$中的一个数，则$|E_K|*|Z_K| = |G|$。</p></blockquote><p>例如，$G={e, (1 2), (3 4), (1 2) (3 4)}$；<br>$E_1=E_2={1, 2}，E_3=E_4={3, 4}$;<br>$|E_1|=|E_2|=|E_3|=|E_4|=2$；<br>$Z_1＝Z_2＝{e, (3 4)}，Z_3＝Z_4＝{e, (1 2)}$；<br>$ |Z_1|=|Z_2|=|Z_3|=|Z_4|=2$。<br>则$|E_1|* |Z_1|=|E_2|* |Z_2|=|E_3|* |Z_3|=|E_4|*|Z_4|=4=|G|$</p><p>设$G={\alpha_1, \alpha_2, …, \alpha_m}$是一个在${1, 2, …, n}$上的置换群，其中$\alpha_1=e$；$\alpha_k$可以被记为一个若干循环节的乘积，$c_1(\alpha_k)$是置换$\alpha_k$中1阶循环节的个数，$k=1, 2, …, m$。</p><p>要到一个小高潮了</p><img src="/2019/01/23/组合数学整理集锦/burnside.jpg"><p>可以利用上面的结论进行证明：<br>不妨设$ N={ 1, 2, …n } $中共有$L$个等价类，$ N=E_1+E_2+…+E_n $<br>$$<br>\sum_{k=1}^n|Z_k| = \sum_{i=1}^L\sum_{k\in E_i}|Z_k| = \sum_{i=1}^L|E_i|\cdot |Z_i| = L\cdot |G|<br>$$<br>L就是我们要求的等价类数，于是，<br>$$<br>L = \frac{1}{|G|}\sum_{k=1}^n|Z_k| = \frac{1}{|G|}\sum_{j=1}^s|C(\alpha_j)|<br>$$</p><img src="/2019/01/23/组合数学整理集锦/square.jpg"><img src="/2019/01/23/组合数学整理集锦/squ2.jpg"><img src="/2019/01/23/组合数学整理集锦/squ3.jpg"><img src="/2019/01/23/组合数学整理集锦/squ4.jpg"><p>下面，最主要的部分，波利亚定理，闪亮登场</p><h2><span id="波利亚定理">波利亚定理</span></h2><img src="/2019/01/23/组合数学整理集锦/polya.jpg"><p>可以做题了</p><blockquote><p><a href="http://poj.org/problem?id=1286" target="_blank" rel="noopener">POJ 1286 Necklace of Beads</a></p></blockquote><img src="/2019/01/23/组合数学整理集锦/solution4.jpg"><p>code:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[<span class="number">30</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> gcd(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= y; i++) res *= x;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(n = <span class="number">1</span>; n &lt;= <span class="number">25</span>; n++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans[n] += <span class="built_in">pow</span>(<span class="number">3</span>, gcd(i, n));</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>) ans[n] += <span class="built_in">pow</span>(<span class="number">3</span>, n / <span class="number">2</span> + <span class="number">1</span>) * n;</span><br><span class="line">        <span class="keyword">else</span> ans[n] += <span class="built_in">pow</span>(<span class="number">3</span>, n / <span class="number">2</span>) * n / <span class="number">2</span> + <span class="built_in">pow</span>(<span class="number">3</span>, n / <span class="number">2</span> + <span class="number">1</span>) * n / <span class="number">2</span>;</span><br><span class="line">        ans[n] /= <span class="number">2</span> * n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n != <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1><span id="递推与生成函数">递推与生成函数</span></h1><h2><span id="k阶常系数线性齐次递推关系">k阶常系数线性齐次递推关系</span></h2><p>$ h_n-a_ih_{n-1}-a_2h_{n-2}-…-a_kh_{n-k} = 0 $ … …(1)<br>求解形如$ q^n $的解，得q是下面方程的根（需要同时约去$ q^{n-k} $）<br>$ x^b-a_1x^{k-1}-a_2x^{k-2}-…-a_{k-1}x-a_k = 0 $ … …(2)<br>称(2)为(1)的特征方程（耳熟）<br>称(2)的k个根为(1)的特征根</p><p>若$ p\not=q $是(1)的特征根，则$ c_1p^n+c_2q^n $是(1)的解<br>若$q$是(2)的重根，则$ nq^n $是(1)的解</p><p>求解$ c_1, c_2 $时可以有已知的几项列方程组求解<br>可以证明一定只要有k个不一样的根，方程(1)一定有解。(使用范德蒙矩阵)。</p><p>也就是说，最后一定会有k个特征根（可以相同），通项里就一定有k项（可以合并），分别为每个特征根的n次方。<br>（这是我提炼出来的，意思差不多~）</p><p>举例：对于递推关系$ h_n - 5h_{n-1} + 6h_{n-2}，h_1 = 4, h_2 = 5 $，求通项。<br>解：通项一定形如$ h_n = c_1\cdot 2^n + c_2\cdot 3^n $<br>列方程求出$ c_1, c_2 $，做完了。</p><p>一般情况（跟我想的一样）：<br>对于线性常系数齐次递推关系<br>$ h_n + a_1h_{n-1} + a_2h_{n-2} + … + a_kh_{n-k} = 0$<br>它的k个特征根为$ q_1, q_2, …, q_k $，它们的重数为$ r_1, r_2, …, r_k $，且<br>$ r_1 + r_2 + .. + r_k = k $<br>那么，通项为<br>$ h_n = c_1r_1q_1^n + c_2r_2q_2^n + … + c_kr_kq_k^n $<br>$ c_1, c_2, …, c_k $为常数，可以由已知的前几项解出来。<br>完美。</p><p>叠加原理：<br>设$ x_1, x_2, …, x_k $满足递推关系<br>$ h_n + a_1h_{n-1} + … + a_kh_{n-k} = f(n) $<br>$ y_1, y_2, …, y_k $满足递推关系<br>$ h_n + a_1h_{n-1} + … + a_kh_{n-k} = g(n) $<br>则$ x_1+y_1, x_2+y_2, …, x_k+y_k $满足递推关系<br>$ h_n + a_1h_{n-1} + … + a_kh_{n-k} = f(n) + g(n) $<br>一个重要的应用，有他可知<br>(1)的<strong>通解</strong> + (2)的<strong>特解</strong> = (2)的<strong>通解</strong><br>这样可以求带有常数项的通项公式了，<br>例如$h_n = 2h_{n-1} + 1$ （汉诺塔步数）<br>$ h_n - 2h_{n-1} = 0 $ … …(1)<br>$ h_n - 2h_{n-1} = 1 $ … …(2)<br>(1)的通解可以轻松求出为$ h_n = 2^n $<br>(2)有特解-1<br>因此(2)通解为$ h_n = 2^n - 1 $</p><p>特解求法<br>定理:（未完）<br>待定系数法吧</p><p>转移矩阵与递推关系有相同的特征多项式<br>（转移矩阵就是矩阵优化里那个搭配快速幂的东西）</p><h2><span id="生成函数">生成函数</span></h2><p>数列$ h_1, h_2, h_3, … $对应的生成函数定义为<br>$ g(x) = h_0 + h_1x + h_2x^2 + h_3x^3 … $<br>有限数列$ h_n $可补零变成无限</p><p>例：无限序列$ h_n = 1 $的生成函数是<br>$ g(x) = 1 + x + x^2 + x^3 + … $<br>在$ |x|&lt;1 $时，上式为$ g(x) = \frac{1}{1-x} $</p><p>$$ \frac{1}{1-x} = 1 + x + x^2 + x^3 + … \<br> \frac{1}{(1-x)^2} = 1 + 2x + 3x^2 + … \<br>\frac{1}{(1-x)^k} = \sum_{n=0}^{+\infty}C_{k+n-1}^{k-1}x^n \<br>e^x = 1 + \frac{x}{1!} + \frac{x^2}{2!} + \frac{x^2}{3!} $$</p><p>多重集组合可以使用生成函数</p><p>例：2个1袋的苹果无限，5个1提的香蕉无限，4个散橘子，1个梨子，求从中组合出n个水果的方案数<br>解：$ h_n = (\sum_{a=0}^{+\infty}x^{2a})\cdot (\sum_{b=0}^{+\infty}x^{5b})\cdot (\sum_{c=0}^4x^c)\cdot (\sum_{d=0}^1x^c)  \ = (1 + x^2 + x^4 + …)(1 + x^5 + x^{10} + …)(1 + x + x^2 + x^3 + x^4)(1 + x) \ = \frac{1}{1-x^2}\cdot \frac{1}{1-x^5}\cdot (1+x+x^2+x^3+x^4)(1+x) \ = \frac{1}{(1-x)(1+x)}\cdot\frac{1}{(1+x+x^2+x^3+x^4)(1-x)}\cdot(1+x+x^2+x^3+x^4)\cdot(1+x)\ = \frac{1}{(1-x)^2} $<br>的n次项系数<br>答案为$ n + 1 $</p><p>泰勒展开公式<br>$ f(x) = f(0) + \frac{f’(0)}{1!}x + \frac{f’’(0)}{2!}x^2 + \frac{f’’’(0)}{3!}x^3 + … $<br>哇喔</p><p>求卷积：<br>求卷积利用生成函数具有天然的优势<br>原数列生成函数的平方做多项式乘法，$x^n$前的系数，就是n的卷积</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#排列的生成&quot;&gt;排列的生成&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#按字典序思想生成下一个排列&quot;&gt;按字典序思想生成下一个排列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#排列和组合的计数&quot;&gt;排列和组合的计数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#基本组合恒等式&quot;&gt;基本组合恒等式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#两种特殊的排列组合技术公式&quot;&gt;两种特殊的排列组合技术公式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#catalan数&quot;&gt;Catalan数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#公式&quot;&gt;公式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#应用&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#操练&quot;&gt;操练&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bell数&quot;&gt;Bell数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stirling数&quot;&gt;Stirling数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#多重集的排列组合&quot;&gt;多重集的排列组合&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#多重集的排列&quot;&gt;多重集的排列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#多重集的组合&quot;&gt;多重集的组合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#容斥原理与鸽笼原理&quot;&gt;容斥原理与鸽笼原理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#鸽笼原理&quot;&gt;鸽笼原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#容斥原理&quot;&gt;容斥原理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#计算并集元素个数&quot;&gt;计算并集元素个数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#计算错排的方案数&quot;&gt;计算错排的方案数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ramsey定理&quot;&gt;Ramsey定理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ramsey数&quot;&gt;Ramsey数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#波利亚定理&quot;&gt;波利亚定理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#定义们&quot;&gt;定义们&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bornside引理&quot;&gt;Bornside引理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#波利亚定理-1&quot;&gt;波利亚定理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#递推与生成函数&quot;&gt;递推与生成函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#k阶常系数线性齐次递推关系&quot;&gt;k阶常系数线性齐次递推关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#生成函数&quot;&gt;生成函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="组合" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88/"/>
    
    
      <category term="排列组合" scheme="http://yoursite.com/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
      <category term="波利亚定理" scheme="http://yoursite.com/tags/%E6%B3%A2%E5%88%A9%E4%BA%9A%E5%AE%9A%E7%90%86/"/>
    
      <category term="生成函数" scheme="http://yoursite.com/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1001 狼抓兔子</title>
    <link href="http://yoursite.com/2019/01/22/BZOJ1001-%E7%8B%BC%E6%8A%93%E5%85%94%E5%AD%90/"/>
    <id>http://yoursite.com/2019/01/22/BZOJ1001-狼抓兔子/</id>
    <published>2019-01-22T12:56:40.000Z</published>
    <updated>2019-05-19T08:39:41.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1001" target="_blank" rel="noopener">BZOJ1001</a></p></blockquote><h1><span id="solution">Solution</span></h1><h2><span id="解法一网络流">解法一：网络流</span></h2><p>很容易想到题目让求的就是最小割，利用最小割最大流定理，就是一道求最大流的裸题。<br>说几点Dinic的注意点：</p><ul><li>tot初始化为1</li><li>当发现一条路无法增光时，将d数组设为0，表示该点不可能继续增广，可以大大提速</li><li>路径是双向边，再加上反向边，总共是4条边</li><li>模板尽可能背的准一点吧，我<del>默写</del>的时候出来很多小问题</li></ul><h2><span id="解法二耦合图">解法二：耦合图</span></h2><p>这个解法就巧妙多了。<br><a id="more"></a></p><h1><span id="code">Code</span></h1><h2><span id="解法一">解法一</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, head[N*N], ver[N*N*<span class="number">12</span>], Next[N*N*<span class="number">12</span>], edge[N*N*<span class="number">12</span>], tot = <span class="number">1</span>, d[N*N], maxflow, f, s, t;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    ver[++tot] = y, edge[tot] = z, Next[tot] = head[x], head[x] = tot;</span><br><span class="line">    ver[++tot] = x, edge[tot] = z, Next[tot] = head[y], head[y] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    d[s] = <span class="number">1</span>; q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = Next[i]) <span class="keyword">if</span>(edge[i] &amp;&amp; !d[ver[i]]) &#123;</span><br><span class="line">            d[ver[i]] = d[x] + <span class="number">1</span>;</span><br><span class="line">            q.push(ver[i]);</span><br><span class="line">            <span class="keyword">if</span>(ver[i] == t) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> k, rest = flow;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i &amp;&amp; rest; i = Next[i]) </span><br><span class="line">        <span class="keyword">if</span>(edge[i] &amp;&amp; d[ver[i]] == d[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            k = dinic(ver[i], min(rest, edge[i]));</span><br><span class="line">            <span class="keyword">if</span>(!k) d[ver[i]] = <span class="number">0</span>;</span><br><span class="line">            rest -= k;</span><br><span class="line">            edge[i] -= k;</span><br><span class="line">            edge[i ^ <span class="number">1</span>] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> flow - rest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); </span><br><span class="line">    <span class="keyword">int</span> z; s = <span class="number">1</span>, t = n * m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z), add(i*m+j, i*m+j+<span class="number">1</span>, z), add(i*m+j+<span class="number">1</span>, i*m+j, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z), add(i*m+j, i*m+m+j, z), add(i*m+m+j, i*m+j, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;z), add(i*m+j, i*m+m+j+<span class="number">1</span>, z), add(i*m+m+j+<span class="number">1</span>, i*m+j, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(bfs()) <span class="keyword">while</span>(f = dinic(s, inf)) maxflow += f;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxflow &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1001&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h1&gt;&lt;h2 id=&quot;解法一：网络流&quot;&gt;&lt;a href=&quot;#解法一：网络流&quot; class=&quot;headerlink&quot; title=&quot;解法一：网络流&quot;&gt;&lt;/a&gt;解法一：网络流&lt;/h2&gt;&lt;p&gt;很容易想到题目让求的就是最小割，利用最小割最大流定理，就是一道求最大流的裸题。&lt;br&gt;说几点Dinic的注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tot初始化为1&lt;/li&gt;
&lt;li&gt;当发现一条路无法增光时，将d数组设为0，表示该点不可能继续增广，可以大大提速&lt;/li&gt;
&lt;li&gt;路径是双向边，再加上反向边，总共是4条边&lt;/li&gt;
&lt;li&gt;模板尽可能背的准一点吧，我&lt;del&gt;默写&lt;/del&gt;的时候出来很多小问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解法二：耦合图&quot;&gt;&lt;a href=&quot;#解法二：耦合图&quot; class=&quot;headerlink&quot; title=&quot;解法二：耦合图&quot;&gt;&lt;/a&gt;解法二：耦合图&lt;/h2&gt;&lt;p&gt;这个解法就巧妙多了。&lt;br&gt;
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    
      <category term="网络流-最大流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="耦合图" scheme="http://yoursite.com/tags/%E8%80%A6%E5%90%88%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2434 阿狸的打字机</title>
    <link href="http://yoursite.com/2019/01/22/BZOJ2434-%E9%98%BF%E7%8B%B8%E7%9A%84%E6%89%93%E5%AD%97%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/01/22/BZOJ2434-阿狸的打字机/</id>
    <published>2019-01-22T11:44:58.000Z</published>
    <updated>2019-05-19T08:40:19.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2434" target="_blank" rel="noopener">BZOJ2434</a><br><a id="more"></a></p></blockquote><h1><span id="solution">Solution</span></h1><h2><span id="40分做法">40分做法</span></h2><p>第一想法，AC自动机，记录每个字符串以及它们在Trie上的哪个节点结束，直接匹配（好暴力啊）。<br>事实上，这种做法，仅仅是记录所有的字符串都会超时超内存，都轮不到匹配的事。但可以作为一个模板题写写嘛。</p><h3><span id="100分做法">100分做法</span></h3><p>这道题作为一道NOI题，非常巧妙地运用了AC自动机的一系列扩展性质。<br>我们考虑构建自动机之后做了什么，无非是在fail数组上跳来跳去来寻找匹配。而每一个节点有唯一的fail节点，这让我们联想到一棵新的树，“fail树”，它以fail数组为边。<br>于是，惊喜地发现，要想出现字符串x，就要出现在x的尾节点在“fail树”上的子树中。<br>要发现，<strong>若字符串x在字符串y中出现，则y所在Trie的节点会出现在x对应在“fail树”上的子树中，出现的次数即为匹配数</strong><br>因此，题目就转化为，搞出AC自动机，搞出“fail树”，求出x的子树，求出y在Trie上的链，回答他们有多少公共节点。<br>但如果对于每个询问都这样求一边，依旧是40分，因此我们考虑一起计算。这里在代码实现上比较巧妙。子树可以用dfs序变成区间问题，而对于链，我们可以只用一遍dfs，进入一个节点时把他+1，出来时-1，<br><!--more--></p><h1><span id="code">Code</span></h1><h2><span id="40分代码">40分代码</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> n, m, ch[N][<span class="number">30</span>], pos[N], nxt[N], tot = <span class="number">1</span>, s[N], tail;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dic[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ch[cur][s[i]]) ch[cur][s[i]] = ++tot;</span><br><span class="line">        cur = ch[cur][s[i]]; </span><br><span class="line">    &#125; pos[++n] = cur;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail; i++) dic[n].push_back(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) ch[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[x][i]) ch[x][i] = ch[nxt[x]][i];</span><br><span class="line">            <span class="keyword">else</span> q.push(ch[x][i]), nxt[ch[x][i]] = ch[nxt[x]][i];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> pa, <span class="keyword">int</span> son)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dic[pa].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = dic[pa][i], k = ch[cur][c];</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            res += pos[son] == k;</span><br><span class="line">            k = nxt[k];</span><br><span class="line">        &#125;</span><br><span class="line">        cur = ch[cur][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str); <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'P'</span>) insert();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'B'</span> &amp;&amp; tail) tail--;</span><br><span class="line">        <span class="keyword">else</span> s[++tail] = str[i] - <span class="string">'a'</span> + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    bfs();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find(y, x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="100分代码">100分代码</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> n, m, ch[N][<span class="number">30</span>], fa[N], nxt[N], tot = <span class="number">1</span>, ans[N], ch1[N][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> pos[N], bel[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dic[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[N], ver[N+N], Next[N+N], edgetot;</span><br><span class="line"><span class="keyword">int</span> fir[N], sec[N], nod[N+N], pool;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ver[++edgetot] = y, Next[edgetot] = head[x], head[x] = edgetot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span> <span class="keyword">int</span> i, x, y; &#125;q[N];</span><br><span class="line"><span class="keyword">int</span> ql[N], qr[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Q a, Q b)</span> </span>&#123; <span class="keyword">return</span> a.y &lt; b.y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[N+N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pplus</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(; p &lt;= pool; p += p&amp;-p) c[p] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; p; p -= p&amp;-p) res += c[p];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) ch[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); nxt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[x][i]) ch[x][i] = ch[nxt[x]][i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                q.push(ch[x][i]);</span><br><span class="line">                nxt[ch[x][i]] = ch[nxt[x]][i];</span><br><span class="line">                add(ch[x][i], ch[nxt[x]][i]);</span><br><span class="line">                add(ch[nxt[x]][i], ch[x][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdfn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    fir[x] = ++pool;</span><br><span class="line">    nod[pool] = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = Next[i]) <span class="keyword">if</span>(ver[i] != f) getdfn(ver[i], x);</span><br><span class="line">    sec[x] = ++pool;</span><br><span class="line">    nod[pool] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    pplus(fir[x], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(bel[x] &amp;&amp; ql[bel[x]]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ql[bel[x]]; i &lt;= qr[bel[x]]; i++)</span><br><span class="line">            ans[q[i].i] = query(sec[pos[q[i].x]]) - query(fir[pos[q[i].x]] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) <span class="keyword">if</span>(ch1[x][i]) dfs(ch1[x][i]);</span><br><span class="line">    pplus(fir[x], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str); <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, u = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'P'</span>) bel[u] = ++n, pos[n] = u;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">'B'</span>) u = fa[u];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> c = str[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(ch[u][c]) u = ch[u][c];</span><br><span class="line">            <span class="keyword">else</span> ch[u][c] = ++tot, fa[ch[u][c]] = u, u = tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(ch1, ch, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">    bfs(); getdfn(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;q[i].x, &amp;q[i].y), q[i].i = i;</span><br><span class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, pos = <span class="number">1</span>; i &lt;= m; i = pos) &#123;</span><br><span class="line">        ql[q[i].y] = i;</span><br><span class="line">        <span class="keyword">while</span>(q[i].y == q[pos].y) pos++;</span><br><span class="line">        qr[q[i].y] = pos - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=2434&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ2434&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="AC自动机" scheme="http://yoursite.com/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1926 粟粟的书架</title>
    <link href="http://yoursite.com/2019/01/22/BZOJ1926-%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/01/22/BZOJ1926-粟粟的书架/</id>
    <published>2019-01-22T07:22:56.000Z</published>
    <updated>2019-05-19T08:40:01.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1926" target="_blank" rel="noopener">BZOJ1926</a></p></blockquote><h1><span id="solution">Solution</span></h1><h2><span id="前50的数据">前50%的数据</span></h2><p>注意到P不大于1000，因此可以预处理出与P有关的数组。<br>val[i][j][k]表示(i, j)左上方的子矩阵中大于等于k的数的总和<br>num[i][j][k]表示(i, j)左上方的子矩阵中大于等于k的数的个数<br>然后就可以<code>二分答案</code>了，二分k，求矩阵前缀和，判定一下OK。</p><h2><span id="后50的数据">后50%的数据</span></h2><p>沿用前面的二分思路，但预处理时间和空间都会爆。<del>这里可以用比较暴力的方法乱搞，但我们要追求高效嘛。</del> 因此想到前缀和就要想到主席树，可以大大节省时间空间。<br>具体来说，对每个前缀维护一个线段树，节点(l, r)维护两个信息：<br>P处于l、r之间的数的总和…(1)<br>P处于l、r之间的数的个数…(2)<br>(就和上面的前缀和意义一样)。<br>对这个线段树可持久化，得到一棵<code>主席树</code>。查询时，在要求的区间的线段树上用(1)判断左走还是右走，用(2)计算答案。</p><h2><span id="注意点">注意点：</span></h2><ul><li><strong>一个区间可能有很多相同的数，只要取其中的一部分</strong>，计算得到要取多少，具体看代码。</li><li>前缀和左端点-1</li><li>递归到头后控制返回</li><li>为了防止混淆，我在代码中把两种解法放在不同的命名空间里。<a id="more"></a><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r, c, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> easy &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</span><br><span class="line">    <span class="keyword">int</span> p[N][N], num[N][N][P], x1, x2, y1, y2;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val[N][N][P], h;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val[x2][y2][k] - val[x1<span class="number">-1</span>][y2][k] - val[x2][y1<span class="number">-1</span>][k] + val[x1<span class="number">-1</span>][y1<span class="number">-1</span>][k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1000</span>; k++) &#123;</span><br><span class="line">                    val[i][j][k] = val[i<span class="number">-1</span>][j][k] + val[i][j<span class="number">-1</span>][k] - val[i<span class="number">-1</span>][j<span class="number">-1</span>][k];</span><br><span class="line">                    num[i][j][k] = num[i<span class="number">-1</span>][j][k] + num[i][j<span class="number">-1</span>][k] - num[i<span class="number">-1</span>][j<span class="number">-1</span>][k];</span><br><span class="line">                    <span class="keyword">if</span>(k &lt;= p[i][j]) val[i][j][k] += p[i][j], num[i][j][k]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%lld"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2, &amp;h);</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(calc(mid) &gt;= h) l = mid; <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Poor QLW\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[x2][y2][l+<span class="number">1</span>] - num[x1<span class="number">-1</span>][y2][l+<span class="number">1</span>] - num[x2][y1<span class="number">-1</span>][l+<span class="number">1</span>] + num[x1<span class="number">-1</span>][y1<span class="number">-1</span>][l+<span class="number">1</span>] </span><br><span class="line">                    + (h - calc(l+<span class="number">1</span>) + l - <span class="number">1</span>) / l);</span><br><span class="line">                    <span class="comment">//此处要考虑重复的部分到底选几个，肯定是达到要求的前提下选的越少越好</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hard &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line">    <span class="keyword">int</span> lc[N*<span class="number">32</span>], rc[N*<span class="number">32</span>], num[N*<span class="number">32</span>], p[N], rt[N], tot;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val[N*<span class="number">32</span>], h;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = ++tot;</span><br><span class="line">        lc[p] = lc[pre], rc[p] = rc[pre], val[p] = val[pre] + x, num[p] = num[pre] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid) lc[p] = build(lc[pre], l, mid, x);</span><br><span class="line">        <span class="keyword">else</span> rc[p] = build(rc[pre], mid + <span class="number">1</span>, r, x);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lp, <span class="keyword">int</span> rp, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> (x + l - <span class="number">1</span>) / l;</span><br><span class="line">            <span class="comment">//这里跟上面一样，要考虑相同的部分。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, y = val[rc[rp]] - val[rc[lp]];</span><br><span class="line">        <span class="keyword">if</span>(y &gt;= x) <span class="keyword">return</span> query(rc[lp], rc[rp], mid + <span class="number">1</span>, r, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> query(lc[lp], lc[rp], l, mid, x - y) + num[rc[rp]] - num[rc[lp]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]), rt[i] = build(rt[i<span class="number">-1</span>], <span class="number">1</span>, <span class="number">1000</span>, p[i]);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l, r, t1, t2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%lld"</span>, &amp;t1, &amp;l, &amp;t2, &amp;r, &amp;h);</span><br><span class="line">            <span class="keyword">int</span> ans = query(rt[l<span class="number">-1</span>], rt[r], <span class="number">1</span>, <span class="number">1000</span>, h);</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; r - l + <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Poor QLW\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;r, &amp;c, &amp;m);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">1</span>) hard::work();</span><br><span class="line">    <span class="keyword">else</span> easy::work();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1926&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1926&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h1&gt;&lt;h2 id=&quot;前50-的数据&quot;&gt;&lt;a href=&quot;#前50-的数据&quot; class=&quot;headerlink&quot; title=&quot;前50%的数据&quot;&gt;&lt;/a&gt;前50%的数据&lt;/h2&gt;&lt;p&gt;注意到P不大于1000，因此可以预处理出与P有关的数组。&lt;br&gt;val[i][j][k]表示(i, j)左上方的子矩阵中大于等于k的数的总和&lt;br&gt;num[i][j][k]表示(i, j)左上方的子矩阵中大于等于k的数的个数&lt;br&gt;然后就可以&lt;code&gt;二分答案&lt;/code&gt;了，二分k，求矩阵前缀和，判定一下OK。&lt;/p&gt;
&lt;h2 id=&quot;后50-的数据&quot;&gt;&lt;a href=&quot;#后50-的数据&quot; class=&quot;headerlink&quot; title=&quot;后50%的数据&quot;&gt;&lt;/a&gt;后50%的数据&lt;/h2&gt;&lt;p&gt;沿用前面的二分思路，但预处理时间和空间都会爆。&lt;del&gt;这里可以用比较暴力的方法乱搞，但我们要追求高效嘛。&lt;/del&gt; 因此想到前缀和就要想到主席树，可以大大节省时间空间。&lt;br&gt;具体来说，对每个前缀维护一个线段树，节点(l, r)维护两个信息：&lt;br&gt;P处于l、r之间的数的总和…(1)&lt;br&gt;P处于l、r之间的数的个数…(2)&lt;br&gt;(就和上面的前缀和意义一样)。&lt;br&gt;对这个线段树可持久化，得到一棵&lt;code&gt;主席树&lt;/code&gt;。查询时，在要求的区间的线段树上用(1)判断左走还是右走，用(2)计算答案。&lt;/p&gt;
&lt;h2 id=&quot;注意点：&quot;&gt;&lt;a href=&quot;#注意点：&quot; class=&quot;headerlink&quot; title=&quot;注意点：&quot;&gt;&lt;/a&gt;注意点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个区间可能有很多相同的数，只要取其中的一部分&lt;/strong&gt;，计算得到要取多少，具体看代码。&lt;/li&gt;
&lt;li&gt;前缀和左端点-1&lt;/li&gt;
&lt;li&gt;递归到头后控制返回&lt;/li&gt;
&lt;li&gt;为了防止混淆，我在代码中把两种解法放在不同的命名空间里。
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="可持久化" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1070 修车</title>
    <link href="http://yoursite.com/2019/01/17/BZOJ1070-%E4%BF%AE%E8%BD%A6/"/>
    <id>http://yoursite.com/2019/01/17/BZOJ1070-修车/</id>
    <published>2019-01-17T13:16:09.000Z</published>
    <updated>2019-05-19T08:39:23.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1070" target="_blank" rel="noopener">BZOJ1070</a></p></blockquote><h1><span id="solution">Solution</span></h1><p>对于像这样的对应匹配的问题，一般可以使用网络流求解，即构建二分图，大部分时候求最大匹配（当然也不仅是匹配）。本题中一次维修要消耗一定的时间，因此需要使用最小费用最大流。</p><p>最原始的思路是，左部工人，右部客户的二部图，但本题的特殊之处在于排在后面的人会有更长的等待时间。我们仍需保持这是一个二分图，因此需要对点或边进行一些调整。</p><p>首先，要使用一个重要的思想，考虑每辆车对总等待时间的贡献，即<strong>不计算每个顾客等多久，而计算他让别人等了多久</strong></p><p>每一个工人一个车一个车的修，每修一辆车会让后面的人多等一会儿。</p><p>此时就可以想到拆点。把每一个工人节点k拆成个N点，等同于正在修他将要修的倒数第i辆车，向另外一部j点连边即代表他这个修的是j号车， 费用为$a[j][k]*i$，乘以i是因为后面的i辆车都要等待这个时间。</p><p>事实上本题的构图体现了一个<strong>阶段化拆点</strong>的思想，一个点拆成它的不同阶段，相互独立。</p><p>至于二部图的网络流构图法就不累述了，这里说几个注意点：</p><ol><li>边编号要从2开始计</li><li>不要忘记建反向边，容量0，费用-w</li><li>清空数组神马的别忘了<a id="more"></a></li></ol><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">1010</span>, E = <span class="number">200010</span>, inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot = <span class="number">1</span>, head[V], ver[E], Next[E], cap[E], cost[E], a[<span class="number">20</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> s, t, pe[V], pv[V], maxflow, mincost, d[V], v[V];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    ver[++tot] = y, cap[tot] = c, cost[tot] = w;</span><br><span class="line">    Next[tot] = head[x], head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">        q.push(s); d[s] = <span class="number">0</span>; v[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.size()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">            v[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = Next[i]) <span class="keyword">if</span>(cap[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = ver[i];</span><br><span class="line">                <span class="keyword">if</span>(d[y] &gt; d[x] + cost[i]) &#123;</span><br><span class="line">                    d[y] = d[x] + cost[i]; pv[y] = x; pe[y] = i;</span><br><span class="line">                    <span class="keyword">if</span>(!v[y]) v[y] = <span class="number">1</span>, q.push(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d[t] == inf) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> flow = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = pv[i]) flow = min(flow, cap[pe[i]]);</span><br><span class="line">        maxflow += flow;</span><br><span class="line">        mincost += flow * d[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = pv[i]) cap[pe[i]] -= flow, cap[pe[i] ^ <span class="number">1</span>] += flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">    s = n * m + n + <span class="number">1</span>, t = s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[j][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) </span><br><span class="line">                add(i * n + j, m * n + k, <span class="number">1</span>, a[i+<span class="number">1</span>][k] * j), </span><br><span class="line">                add(n * m + k, i * n + j, <span class="number">0</span>, -a[i+<span class="number">1</span>][k] * j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * m; i++) add(s, i, <span class="number">1</span>, <span class="number">0</span>), add(i, s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n * m + <span class="number">1</span>; i &lt;= n * m + n; i++) add(i, t, <span class="number">1</span>, <span class="number">0</span>), add(t, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, (<span class="keyword">double</span>)mincost / n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=1070&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ1070&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h1&gt;&lt;p&gt;对于像这样的对应匹配的问题，一般可以使用网络流求解，即构建二分图，大部分时候求最大匹配（当然也不仅是匹配）。本题中一次维修要消耗一定的时间，因此需要使用最小费用最大流。&lt;/p&gt;
&lt;p&gt;最原始的思路是，左部工人，右部客户的二部图，但本题的特殊之处在于排在后面的人会有更长的等待时间。我们仍需保持这是一个二分图，因此需要对点或边进行一些调整。&lt;/p&gt;
&lt;p&gt;首先，要使用一个重要的思想，考虑每辆车对总等待时间的贡献，即&lt;strong&gt;不计算每个顾客等多久，而计算他让别人等了多久&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个工人一个车一个车的修，每修一辆车会让后面的人多等一会儿。&lt;/p&gt;
&lt;p&gt;此时就可以想到拆点。把每一个工人节点k拆成个N点，等同于正在修他将要修的倒数第i辆车，向另外一部j点连边即代表他这个修的是j号车， 费用为$a[j][k]*i$，乘以i是因为后面的i辆车都要等待这个时间。&lt;/p&gt;
&lt;p&gt;事实上本题的构图体现了一个&lt;strong&gt;阶段化拆点&lt;/strong&gt;的思想，一个点拆成它的不同阶段，相互独立。&lt;/p&gt;
&lt;p&gt;至于二部图的网络流构图法就不累述了，这里说几个注意点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;边编号要从2开始计&lt;/li&gt;
&lt;li&gt;不要忘记建反向边，容量0，费用-w&lt;/li&gt;
&lt;li&gt;清空数组神马的别忘了
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    
      <category term="网络流-费用流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3994 约数个数和</title>
    <link href="http://yoursite.com/2019/01/13/BZOJ3994-%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/13/BZOJ3994-约数个数和/</id>
    <published>2019-01-13T05:57:35.000Z</published>
    <updated>2019-05-19T08:40:35.381Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3994" target="_blank" rel="noopener">BZOJ3994</a></p></blockquote><h1><span id="solution">Solution</span></h1><p>首先，要先介绍一个可爱的结论：<br>$$ d(ij) = \sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$<br>简单证明一下：<br>当$(i, j)=1$时，结果显然为i的约数个数乘j的约数个数。<br>否则，会有一部分重复，因为i*j的某一个因数可以有不同方式得到。怎样得到另一种方式呢？比如现在有$x|i,\ y|j,\ xy|ij,\ d|x$此时让x除以d，y乘以d，得到新的$xy|ij$，而这样做合法的前提是d同时是i和j的因数，或者说$gcd(x, yd)\ne 1$，当有这样的一对约数时，把结果减1，就可以得到这个式子。</p><p>结合其他几道题目，可以发现反演似乎非常青睐gcd，所有的数论函数都要尽量往最大公约数上面靠，然后再开始套路。</p><p>之后就是一道比较经典的反演题目了，总之就是推式子吧。求$$ \sum_{i=1}^N\sum_{j=1}^M\sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$<br>相同的x, y枚举了很多次，因此先枚举x, y，贡献可以直接计算得到，原式即<br>$$\sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = 1]$$<br>我们令$$ f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = n] $$$$ F(d) = \sum_{d|n}f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[d\ |\ gcd(i, j)] $$此处可以开心得去掉gcd，用漂亮的除法代替，枚举i和j分别是d的多少倍，得到$$ F(x) = \sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor$$<br>这时就可以使用<code>莫比乌斯反演</code>了，因为可以看到我们已经消去了gcd，也就是说式子里不存在数论函数了，于是<br>$$ f(d) = \sum_{d|n}\mu(\frac{n}{d})F(n) $$得到答案为$$ ans = f(1) = \sum_{d=1}^{min(N, M)}\mu(d)F(d) =<br>\sum_{d=1}^{min(N, M)}\sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\mu(d)\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor $$<br>现在讨论代码实现，暴力需要三层循环，因此需要用<code>线性筛</code>预处理，对于每一个x，处理出$s[x] = \sum_{i=1}^x\lfloor\frac{x}{i}\rfloor$，未来查询$s[\frac{N}{d}]$，因此只需要枚举d这一个变量。<br>再利用<code>整除分块</code>，$\lfloor\frac{N}{d}\rfloor$且$\lfloor\frac{M}{d}\rfloor$相同的部分只计算一次，就可以在$O(\sqrt{n})$的时间完成一次询问，总复杂度$O(T\sqrt{n})$</p><p>关于$\mu$的计算最好作为一个模板记下啦。<br><a id="more"></a></p><h1><span id="code">Code</span></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">int</span> miu[N], smiu[N], v[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) miu[i] = <span class="number">1</span>, v[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v[i]) <span class="keyword">continue</span>;</span><br><span class="line">        miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + i; j &lt;= n; j += i)&#123;</span><br><span class="line">            v[j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((j / i) % i == <span class="number">0</span>) miu[j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> miu[j] *= <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) smiu[i] = smiu[i<span class="number">-1</span>] + miu[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= i; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">            r = i / (i / l);</span><br><span class="line">            s[i] += <span class="number">1l</span>l * (r - l + <span class="number">1</span>) * (i / l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init(<span class="number">50000</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m) swap(n, m);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= n; i = j + <span class="number">1</span>)&#123;</span><br><span class="line">            j = min(n / (n / i), m / (m / i));</span><br><span class="line">            ans += <span class="number">1l</span>l * (smiu[j] - smiu[i - <span class="number">1</span>]) * s[n / i] * s[m / i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=3994&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BZOJ3994&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h1&gt;&lt;p&gt;首先，要先介绍一个可爱的结论：&lt;br&gt;$$ d(ij) = \sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$&lt;br&gt;简单证明一下：&lt;br&gt;当$(i, j)=1$时，结果显然为i的约数个数乘j的约数个数。&lt;br&gt;否则，会有一部分重复，因为i*j的某一个因数可以有不同方式得到。怎样得到另一种方式呢？比如现在有$x|i,\ y|j,\ xy|ij,\ d|x$此时让x除以d，y乘以d，得到新的$xy|ij$，而这样做合法的前提是d同时是i和j的因数，或者说$gcd(x, yd)\ne 1$，当有这样的一对约数时，把结果减1，就可以得到这个式子。&lt;/p&gt;
&lt;p&gt;结合其他几道题目，可以发现反演似乎非常青睐gcd，所有的数论函数都要尽量往最大公约数上面靠，然后再开始套路。&lt;/p&gt;
&lt;p&gt;之后就是一道比较经典的反演题目了，总之就是推式子吧。求$$ \sum_{i=1}^N\sum_{j=1}^M\sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$&lt;br&gt;相同的x, y枚举了很多次，因此先枚举x, y，贡献可以直接计算得到，原式即&lt;br&gt;$$\sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = 1]$$&lt;br&gt;我们令$$ f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = n] $$$$ F(d) = \sum_{d|n}f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[d\ |\ gcd(i, j)] $$此处可以开心得去掉gcd，用漂亮的除法代替，枚举i和j分别是d的多少倍，得到$$ F(x) = \sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor$$&lt;br&gt;这时就可以使用&lt;code&gt;莫比乌斯反演&lt;/code&gt;了，因为可以看到我们已经消去了gcd，也就是说式子里不存在数论函数了，于是&lt;br&gt;$$ f(d) = \sum_{d|n}\mu(\frac{n}{d})F(n) $$得到答案为$$ ans = f(1) = \sum_{d=1}^{min(N, M)}\mu(d)F(d) =&lt;br&gt;\sum_{d=1}^{min(N, M)}\sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\mu(d)\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor $$&lt;br&gt;现在讨论代码实现，暴力需要三层循环，因此需要用&lt;code&gt;线性筛&lt;/code&gt;预处理，对于每一个x，处理出$s[x] = \sum_{i=1}^x\lfloor\frac{x}{i}\rfloor$，未来查询$s[\frac{N}{d}]$，因此只需要枚举d这一个变量。&lt;br&gt;再利用&lt;code&gt;整除分块&lt;/code&gt;，$\lfloor\frac{N}{d}\rfloor$且$\lfloor\frac{M}{d}\rfloor$相同的部分只计算一次，就可以在$O(\sqrt{n})$的时间完成一次询问，总复杂度$O(T\sqrt{n})$&lt;/p&gt;
&lt;p&gt;关于$\mu$的计算最好作为一个模板记下啦。&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数论" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>施工结束</title>
    <link href="http://yoursite.com/2019/01/13/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    <id>http://yoursite.com/2019/01/13/纪念日/</id>
    <published>2019-01-13T03:57:08.000Z</published>
    <updated>2019-01-13T09:31:15.166Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="博客建成日">博客建成日</span></h1><p>2019年1月13日，该博客基本搭建搭建完成。<br><a id="more"></a><br>话说步入OI也有将近一年的时间了，之前从来没有写过博客。曾经搜题解时看到别人的博客常常是一番羡慕，但不知什么原因，或许是太懒了，一直没有为自己搭建一个blog。从昨晚起，忙碌（<del>玩</del>）了几个小时，心里还是非常有成就感的。从今天起，我应该会养成写题解、发博客的习惯，这应当是有深远意义的。<br>这篇博客主要是为了一个纪念，就像古代人建了一座房子还要写一篇序一样，我如今也是有blog的人了，不仅一番激动。<br>但愿未来这个博客会充实起来，像很多大佬一样有几十篇来自各个OJ的题解。<br>博客界面开不是很满意，未来会慢慢润色的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;博客建成日&quot;&gt;&lt;a href=&quot;#博客建成日&quot; class=&quot;headerlink&quot; title=&quot;博客建成日&quot;&gt;&lt;/a&gt;博客建成日&lt;/h1&gt;&lt;p&gt;2019年1月13日，该博客基本搭建搭建完成。&lt;br&gt;
    
    </summary>
    
      <category term="纪念日" scheme="http://yoursite.com/categories/%E7%BA%AA%E5%BF%B5%E6%97%A5/"/>
    
    
  </entry>
  
</feed>
