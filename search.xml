<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[BZOJ1070 修车]]></title>
    <url>%2F2019%2F01%2F17%2FBZOJ1070-%E4%BF%AE%E8%BD%A6%2F</url>
    <content type="text"><![CDATA[题目链接BZOJ1070 Description 同一时刻有N位车主带着他们的爱车来到了汽车维修中心。维修中心共有M位技术人员，不同的技术人员对不同的车进行维修所用的时间是不同的。现在需要安排这M位技术人员所维修的车及顺序，使得顾客平均等待的时间最小。 说明：顾客的等待时间是指从他把车送至维修中心到维修完毕所用的时间。 Input 第一行有两个m,n，表示技术人员数与顾客数。 接下来n行，每行m个整数。第i+1行第j个数表示第j位技术人员维修第i辆车需要用的时间T。 Output 最小平均等待时间，答案精确到小数点后2位。 Sample Input2 23 21 4 Sample Output1.50 HINT数据范围: (2&lt;=M&lt;=9,1&lt;=N&lt;=60), (1&lt;=T&lt;=1000) Solution对于像这样的对应匹配的问题，一般可以使用网络流求解，即构建二分图，大部分时候求最大匹配（当然也不仅是匹配）。本题中一次维修要消耗一定的时间，因此需要使用最小费用最大流。 最原始的思路是，左部工人，右部客户的二部图，但本题的特殊之处在于排在后面的人会有更长的等待时间。我们仍需保持这是一个二分图，因此需要对点或边进行一些调整。 首先，要使用一个重要的思想，考虑每辆车对总等待时间的贡献，即不计算每个顾客等多久，而计算他让别人等了多久 每一个工人一个车一个车的修，每修一辆车会让后面的人多等一会儿。 此时就可以想到拆点。把每一个工人节点k拆成个N点，等同于正在修他将要修的倒数第i辆车，向另外一部j点连边即代表他这个修的是j号车， 费用为$a[j][k]*i$，乘以i是因为后面的i辆车都要等待这个时间。 事实上本题的构图体现了一个阶段化拆点的思想，一个点拆成它的不同阶段，相互独立。 至于二部图的网络流构图法就不累述了，这里说几个注意点： 边编号要从2开始计 不要忘记建反向边，容量0，费用-w 清空数组神马的别忘了 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;using namespace std;const int V = 1010, E = 200010, inf = 0x3f3f3f3f;int n, m, tot = 1, head[V], ver[E], Next[E], cap[E], cost[E], a[20][100];int s, t, pe[V], pv[V], maxflow, mincost, d[V], v[V];void add(int x, int y, int c, int w)&#123; ver[++tot] = y, cap[tot] = c, cost[tot] = w; Next[tot] = head[x], head[x] = tot;&#125;void solve() &#123; queue&lt;int&gt; q; while(1) &#123; memset(v, 0, sizeof(v)); memset(d, 0x3f, sizeof(d)); while(q.size()) q.pop(); q.push(s); d[s] = 0; v[s] = 1; while(q.size()) &#123; int x = q.front(); q.pop(); v[x] = 0; for(int i = head[x]; i; i = Next[i]) if(cap[i]) &#123; int y = ver[i]; if(d[y] &gt; d[x] + cost[i]) &#123; d[y] = d[x] + cost[i]; pv[y] = x; pe[y] = i; if(!v[y]) v[y] = 1, q.push(y); &#125; &#125; &#125; if(d[t] == inf) break; int flow = inf; for(int i = t; i != s; i = pv[i]) flow = min(flow, cap[pe[i]]); maxflow += flow; mincost += flow * d[t]; for(int i = t; i != s; i = pv[i]) cap[pe[i]] -= flow, cap[pe[i] ^ 1] += flow; &#125;&#125;int main() &#123; scanf("%d%d", &amp;m, &amp;n); s = n * m + n + 1, t = s + 1; for(int i = 1; i &lt;= n; i++) for(int j = 1; j &lt;= m; j++) scanf("%d", &amp;a[j][i]); for(int i = 0; i &lt; m; i++) for(int j = 1; j &lt;= n; j++) for(int k = 1; k &lt;= n; k++) add(i * n + j, m * n + k, 1, a[i+1][k] * j), add(n * m + k, i * n + j, 0, -a[i+1][k] * j); for(int i = 1; i &lt;= n * m; i++) add(s, i, 1, 0), add(i, s, 0, 0); for(int i = n * m + 1; i &lt;= n * m + n; i++) add(i, t, 1, 0), add(t, i, 0, 0); solve(); printf("%.2lf", (double)mincost / n); return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>网络流-费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ3994 约数个数和]]></title>
    <url>%2F2019%2F01%2F13%2FBZOJ3994-%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%92%8C%2F</url>
    <content type="text"><![CDATA[题目链接： BZOJ3994 Description 设d(x)为x的约数个数，给定N、M，求$\sum_{i=1}^N\sum_{j=1}^Md(ij)$ Input输入文件包含多组测试数据。 第一行，一个整数T，表示测试数据的组数。接下来的T行，每行两个整数N、M。 Output T行，每行一个整数，表示你所求的答案。 Sample Input27 45 6 Sample Output110121 HINT1&lt;=N, M&lt;=500001&lt;=T&lt;=50000 Solution首先，要先介绍一个可爱的结论：$$ d(ij) = \sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$简单证明一下：当$(i, j)=1$时，结果显然为i的约数个数乘j的约数个数。否则，会有一部分重复，因为i*j的某一个因数可以有不同方式得到。怎样得到另一种方式呢？比如现在有$x|i,\ y|j,\ xy|ij,\ d|x$此时让x除以d，y乘以d，得到新的$xy|ij$，而这样做合法的前提是d同时是i和j的因数，或者说$gcd(x, yd)\ne 1$，当有这样的一对约数时，把结果减1，就可以得到这个式子。 结合其他几道题目，可以发现反演似乎非常青睐gcd，所有的数论函数都要尽量往最大公约数上面靠，然后再开始套路。 之后就是一道比较经典的反演题目了，总之就是推式子吧。求$$ \sum_{i=1}^N\sum_{j=1}^M\sum_{x|i}\sum_{y|j}[gcd(x, y) = 1] $$相同的x, y枚举了很多次，因此先枚举x, y，贡献可以直接计算得到，原式即$$\sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = 1]$$我们令$$ f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[gcd(i, j) = n] $$$$ F(d) = \sum_{d|n}f(n) = \sum_{i=1}^N\sum_{j=1}^M\lfloor\frac{N}{i}\rfloor\lfloor\frac{M}{j}\rfloor[d\ |\ gcd(i, j)] $$此处可以开心得去掉gcd，用漂亮的除法代替，枚举i和j分别是d的多少倍，得到$$ F(x) = \sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor$$这时就可以使用莫比乌斯反演了，因为可以看到我们已经消去了gcd，也就是说式子里不存在数论函数了，于是$$ f(d) = \sum_{d|n}\mu(\frac{n}{d})F(n) $$得到答案为$$ ans = f(1) = \sum_{d=1}^{min(N, M)}\mu(d)F(d) =\sum_{d=1}^{min(N, M)}\sum_{i=1}^{\lfloor\frac{N}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{M}{d}\rfloor}\mu(d)\lfloor\frac{N}{id}\rfloor\lfloor\frac{M}{jd}\rfloor $$现在讨论代码实现，暴力需要三层循环，因此需要用线性筛预处理，对于每一个x，处理出$s[x] = \sum_{i=1}^x\lfloor\frac{x}{i}\rfloor$，未来查询$s[\frac{N}{d}]$，因此只需要枚举d这一个变量。再利用整除分块，$\lfloor\frac{N}{d}\rfloor$且$\lfloor\frac{M}{d}\rfloor$相同的部分只计算一次，就可以在$O(\sqrt{n})$的时间完成一次询问，总复杂度$O(T\sqrt{n})$ 关于$\mu$的计算最好作为一个模板记下啦。 Code123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 50010;int miu[N], smiu[N], v[N];long long s[N];void init(int n)&#123; for(int i = 1; i &lt;= n; i++) miu[i] = 1, v[i] = 0; for(int i = 2; i &lt;= n; i++)&#123; if(v[i]) continue; miu[i] = -1; for(int j = i + i; j &lt;= n; j += i)&#123; v[j] = 1; if((j / i) % i == 0) miu[j] = 0; else miu[j] *= -1; &#125; &#125; for(int i = 1; i &lt;= n; i++) smiu[i] = smiu[i-1] + miu[i]; for(int i = 1; i &lt;= n; i++) &#123; for(int l = 1, r; l &lt;= i; l = r + 1) &#123; r = i / (i / l); s[i] += 1ll * (r - l + 1) * (i / l); &#125; &#125;&#125;int main()&#123; init(50000); int T; scanf("%d", &amp;T); while(T--)&#123; int n, m; scanf("%d%d", &amp;n, &amp;m); if(n &gt; m) swap(n, m); long long ans = 0; for(int i = 1, j; i &lt;= n; i = j + 1)&#123; j = min(n / (n / i), m / (m / i)); ans += 1ll * (smiu[j] - smiu[i - 1]) * s[n / i] * s[m / i]; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[施工结束]]></title>
    <url>%2F2019%2F01%2F13%2F%E7%BA%AA%E5%BF%B5%E6%97%A5%2F</url>
    <content type="text"><![CDATA[博客建成日2019年1月13日，该博客基本搭建搭建完成。话说步入OI也有将近一年的时间了，之前从来没有写过博客。曾经搜题解时看到别人的博客常常是一番羡慕，但不知什么原因，或许是太懒了，一直没有为自己搭建一个blog。从昨晚起，忙碌（玩）了几个小时，心里还是非常有成就感的。从今天起，我应该会养成写题解、发博客的习惯，这应当是有深远意义的。这篇博客主要是为了一个纪念，就像古代人建了一座房子还要写一篇序一样，我如今也是有blog的人了，不仅一番激动。但愿未来这个博客会充实起来，像很多大佬一样有几十篇来自各个OJ的题解。博客界面开不是很满意，未来会慢慢润色的。]]></content>
      <categories>
        <category>纪念日</category>
      </categories>
  </entry>
</search>
